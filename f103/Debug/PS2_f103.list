
PS2_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bbc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001cc8  08001cc8  00002cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf4  08001cf4  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  08001cf4  08001cf4  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cf4  08001cf4  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf4  08001cf4  00002cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cf8  08001cf8  00002cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001cfc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000018  08001d14  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001d14  000030d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bf1  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abc  00000000  00000000  0000bc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000656  00000000  00000000  0000df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001731f  00000000  00000000  0000e59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b89f  00000000  00000000  000258bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835eb  00000000  00000000  0003115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002034  00000000  00000000  000b478c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000b67c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001cb0 	.word	0x08001cb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001cb0 	.word	0x08001cb0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b31      	ldr	r3, [pc, #196]	@ (8000228 <MX_GPIO_Init+0xdc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a30      	ldr	r2, [pc, #192]	@ (8000228 <MX_GPIO_Init+0xdc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2e      	ldr	r3, [pc, #184]	@ (8000228 <MX_GPIO_Init+0xdc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b2b      	ldr	r3, [pc, #172]	@ (8000228 <MX_GPIO_Init+0xdc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2a      	ldr	r2, [pc, #168]	@ (8000228 <MX_GPIO_Init+0xdc>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b28      	ldr	r3, [pc, #160]	@ (8000228 <MX_GPIO_Init+0xdc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b25      	ldr	r3, [pc, #148]	@ (8000228 <MX_GPIO_Init+0xdc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a24      	ldr	r2, [pc, #144]	@ (8000228 <MX_GPIO_Init+0xdc>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b22      	ldr	r3, [pc, #136]	@ (8000228 <MX_GPIO_Init+0xdc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ae:	481f      	ldr	r0, [pc, #124]	@ (800022c <MX_GPIO_Init+0xe0>)
 80001b0:	f000 fd72 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_CS_GPIO_Port, PS2_CS_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	481d      	ldr	r0, [pc, #116]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001ba:	f000 fd6d 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2104      	movs	r1, #4
 80001c2:	481c      	ldr	r0, [pc, #112]	@ (8000234 <MX_GPIO_Init+0xe8>)
 80001c4:	f000 fd68 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ce:	2301      	movs	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	4619      	mov	r1, r3
 80001e0:	4812      	ldr	r0, [pc, #72]	@ (800022c <MX_GPIO_Init+0xe0>)
 80001e2:	f000 fbd5 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CS_Pin;
 80001e6:	2310      	movs	r3, #16
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_CS_GPIO_Port, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	480c      	ldr	r0, [pc, #48]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001fe:	f000 fbc7 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000202:	2304      	movs	r3, #4
 8000204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000206:	2301      	movs	r3, #1
 8000208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020a:	2300      	movs	r3, #0
 800020c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020e:	2302      	movs	r3, #2
 8000210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	4806      	ldr	r0, [pc, #24]	@ (8000234 <MX_GPIO_Init+0xe8>)
 800021a:	f000 fbb9 	bl	8000990 <HAL_GPIO_Init>

}
 800021e:	bf00      	nop
 8000220:	3720      	adds	r7, #32
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000
 800022c:	40011000 	.word	0x40011000
 8000230:	40010800 	.word	0x40010800
 8000234:	40010c00 	.word	0x40010c00

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fa3d 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f82d 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f7ff ff81 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f99b 	bl	8000584 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800024e:	f000 f8b5 	bl	80003bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
 ps2_handle_t ps2 = {
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <main+0x60>)
 8000260:	607b      	str	r3, [r7, #4]
		 .spi_handle = &hspi1,
		 //.data = {0}
 };
uint8_t success = true;
 8000262:	2301      	movs	r3, #1
 8000264:	75fb      	strb	r3, [r7, #23]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  success = PS2_ReadData(&ps2);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f000 f85b 	bl	8000324 <PS2_ReadData>
 800026e:	4603      	mov	r3, r0
 8000270:	75fb      	strb	r3, [r7, #23]
	  if (success) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000272:	7dfb      	ldrb	r3, [r7, #23]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d005      	beq.n	8000284 <main+0x4c>
 8000278:	2201      	movs	r2, #1
 800027a:	2104      	movs	r1, #4
 800027c:	4807      	ldr	r0, [pc, #28]	@ (800029c <main+0x64>)
 800027e:	f000 fd0b 	bl	8000c98 <HAL_GPIO_WritePin>
 8000282:	e004      	b.n	800028e <main+0x56>
	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2104      	movs	r1, #4
 8000288:	4804      	ldr	r0, [pc, #16]	@ (800029c <main+0x64>)
 800028a:	f000 fd05 	bl	8000c98 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 800028e:	2014      	movs	r0, #20
 8000290:	f000 fa76 	bl	8000780 <HAL_Delay>
	  success = PS2_ReadData(&ps2);
 8000294:	e7e7      	b.n	8000266 <main+0x2e>
 8000296:	bf00      	nop
 8000298:	20000034 	.word	0x20000034
 800029c:	40010c00 	.word	0x40010c00

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	@ 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	@ 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fcd2 	bl	8001c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fcf6 	bl	8000cc8 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e2:	f000 f818 	bl	8000316 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 ff64 	bl	80011cc <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030a:	f000 f804 	bl	8000316 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	@ 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031a:	b672      	cpsid	i
}
 800031c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800031e:	bf00      	nop
 8000320:	e7fd      	b.n	800031e <Error_Handler+0x8>
	...

08000324 <PS2_ReadData>:
	success &= PS2_Cmd(handle, ExitConfig, 9);
	return success;
}

bool PS2_ReadData(ps2_handle_t *handle)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af02      	add	r7, sp, #8
 800032a:	6078      	str	r0, [r7, #4]
	bool success = true;
 800032c:	2301      	movs	r3, #1
 800032e:	73fb      	strb	r3, [r7, #15]
	CS_H; CS_L;
 8000330:	2201      	movs	r2, #1
 8000332:	2110      	movs	r1, #16
 8000334:	481f      	ldr	r0, [pc, #124]	@ (80003b4 <PS2_ReadData+0x90>)
 8000336:	f000 fcaf 	bl	8000c98 <HAL_GPIO_WritePin>
 800033a:	2200      	movs	r2, #0
 800033c:	2110      	movs	r1, #16
 800033e:	481d      	ldr	r0, [pc, #116]	@ (80003b4 <PS2_ReadData+0x90>)
 8000340:	f000 fcaa 	bl	8000c98 <HAL_GPIO_WritePin>
	success &= (HAL_SPI_TransmitReceive(handle -> spi_handle, cmd_read, handle -> data, 9, 100) == HAL_OK);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	1d1a      	adds	r2, r3, #4
 800034c:	2364      	movs	r3, #100	@ 0x64
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2309      	movs	r3, #9
 8000352:	4919      	ldr	r1, [pc, #100]	@ (80003b8 <PS2_ReadData+0x94>)
 8000354:	f001 f94c 	bl	80015f0 <HAL_SPI_TransmitReceive>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	bf0c      	ite	eq
 800035e:	2301      	moveq	r3, #1
 8000360:	2300      	movne	r3, #0
 8000362:	b2db      	uxtb	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	4013      	ands	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	bf14      	ite	ne
 800036e:	2301      	movne	r3, #1
 8000370:	2300      	moveq	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
	CS_H;
 8000374:	2201      	movs	r2, #1
 8000376:	2110      	movs	r1, #16
 8000378:	480e      	ldr	r0, [pc, #56]	@ (80003b4 <PS2_ReadData+0x90>)
 800037a:	f000 fc8d 	bl	8000c98 <HAL_GPIO_WritePin>
	success &= ((handle -> data[1] == 0x41) || (handle -> data[1] == 0x73)) && (handle -> data[2] == 0x5A);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	7952      	ldrb	r2, [r2, #5]
 8000384:	2a41      	cmp	r2, #65	@ 0x41
 8000386:	d003      	beq.n	8000390 <PS2_ReadData+0x6c>
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	7952      	ldrb	r2, [r2, #5]
 800038c:	2a73      	cmp	r2, #115	@ 0x73
 800038e:	d105      	bne.n	800039c <PS2_ReadData+0x78>
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7992      	ldrb	r2, [r2, #6]
 8000394:	2a5a      	cmp	r2, #90	@ 0x5a
 8000396:	d101      	bne.n	800039c <PS2_ReadData+0x78>
 8000398:	2201      	movs	r2, #1
 800039a:	e000      	b.n	800039e <PS2_ReadData+0x7a>
 800039c:	2200      	movs	r2, #0
 800039e:	4013      	ands	r3, r2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	bf14      	ite	ne
 80003a4:	2301      	movne	r3, #1
 80003a6:	2300      	moveq	r3, #0
 80003a8:	73fb      	strb	r3, [r7, #15]
	return success;
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010800 	.word	0x40010800
 80003b8:	20000000 	.word	0x20000000

080003bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80003c0:	4b17      	ldr	r3, [pc, #92]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003c2:	4a18      	ldr	r2, [pc, #96]	@ (8000424 <MX_SPI1_Init+0x68>)
 80003c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c6:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ce:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d4:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003da:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003dc:	2202      	movs	r2, #2
 80003de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003f0:	2220      	movs	r2, #32
 80003f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003f6:	2280      	movs	r2, #128	@ 0x80
 80003f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fa:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <MX_SPI1_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <MX_SPI1_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <MX_SPI1_Init+0x64>)
 8000408:	220a      	movs	r2, #10
 800040a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800040c:	4804      	ldr	r0, [pc, #16]	@ (8000420 <MX_SPI1_Init+0x64>)
 800040e:	f001 f86b 	bl	80014e8 <HAL_SPI_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000418:	f7ff ff7d 	bl	8000316 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000034 	.word	0x20000034
 8000424:	40013000 	.word	0x40013000

08000428 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <HAL_SPI_MspInit+0x88>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d12f      	bne.n	80004a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000448:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <HAL_SPI_MspInit+0x8c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a19      	ldr	r2, [pc, #100]	@ (80004b4 <HAL_SPI_MspInit+0x8c>)
 800044e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <HAL_SPI_MspInit+0x8c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <HAL_SPI_MspInit+0x8c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <HAL_SPI_MspInit+0x8c>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <HAL_SPI_MspInit+0x8c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000478:	23a0      	movs	r3, #160	@ 0xa0
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	2302      	movs	r3, #2
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <HAL_SPI_MspInit+0x90>)
 800048c:	f000 fa80 	bl	8000990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000490:	2340      	movs	r3, #64	@ 0x40
 8000492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	4805      	ldr	r0, [pc, #20]	@ (80004b8 <HAL_SPI_MspInit+0x90>)
 80004a4:	f000 fa74 	bl	8000990 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40013000 	.word	0x40013000
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010800 	.word	0x40010800

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c2:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <HAL_MspInit+0x5c>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_MspInit+0x5c>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <HAL_MspInit+0x5c>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <HAL_MspInit+0x5c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <HAL_MspInit+0x60>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <HAL_MspInit+0x60>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <NMI_Handler+0x4>

08000528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <MemManage_Handler+0x4>

08000538 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <UsageFault_Handler+0x4>

08000548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f8ea 	bl	8000748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <MX_USART1_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005bc:	f001 fa6e 	bl	8001a9c <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005c6:	f7ff fea6 	bl	8000316 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	40013800 	.word	0x40013800

080005d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <HAL_UART_MspInit+0x8c>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d131      	bne.n	800065c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <HAL_UART_MspInit+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <HAL_UART_MspInit+0x90>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <HAL_UART_MspInit+0x90>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <HAL_UART_MspInit+0x90>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <HAL_UART_MspInit+0x90>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <HAL_UART_MspInit+0x90>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000628:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4619      	mov	r1, r3
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <HAL_UART_MspInit+0x94>)
 800063e:	f000 f9a7 	bl	8000990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <HAL_UART_MspInit+0x94>)
 8000658:	f000 f99a 	bl	8000990 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40013800 	.word	0x40013800
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800

08000670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000670:	f7ff ff82 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000676:	490c      	ldr	r1, [pc, #48]	@ (80006a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800068c:	4c09      	ldr	r4, [pc, #36]	@ (80006b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f001 fae5 	bl	8001c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fdcb 	bl	8000238 <main>
  bx lr
 80006a2:	4770      	bx	lr
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80006ac:	08001cfc 	.word	0x08001cfc
  ldr r2, =_sbss
 80006b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80006b4:	200000d8 	.word	0x200000d8

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>
	...

080006bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_Init+0x28>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a07      	ldr	r2, [pc, #28]	@ (80006e4 <HAL_Init+0x28>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f92b 	bl	8000928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d2:	200f      	movs	r0, #15
 80006d4:	f000 f808 	bl	80006e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d8:	f7ff fef0 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <HAL_InitTick+0x54>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <HAL_InitTick+0x58>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000702:	fbb2 f3f3 	udiv	r3, r2, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f935 	bl	8000976 <HAL_SYSTICK_Config>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e00e      	b.n	8000734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d80a      	bhi.n	8000732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800071c:	2200      	movs	r2, #0
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	f04f 30ff 	mov.w	r0, #4294967295
 8000724:	f000 f90b 	bl	800093e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000728:	4a06      	ldr	r2, [pc, #24]	@ (8000744 <HAL_InitTick+0x5c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	e000      	b.n	8000734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000000c 	.word	0x2000000c
 8000740:	20000014 	.word	0x20000014
 8000744:	20000010 	.word	0x20000010

08000748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <HAL_IncTick+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_IncTick+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a03      	ldr	r2, [pc, #12]	@ (8000768 <HAL_IncTick+0x20>)
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000014 	.word	0x20000014
 8000768:	200000d4 	.word	0x200000d4

0800076c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	@ (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200000d4 	.word	0x200000d4

08000780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff fff0 	bl	800076c <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	d005      	beq.n	80007a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <HAL_Delay+0x44>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a6:	bf00      	nop
 80007a8:	f7ff ffe0 	bl	800076c <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8f7      	bhi.n	80007a8 <HAL_Delay+0x28>
  {
  }
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000014 	.word	0x20000014

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	@ (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db0a      	blt.n	8000856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	490c      	ldr	r1, [pc, #48]	@ (8000878 <__NVIC_SetPriority+0x4c>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	440b      	add	r3, r1
 8000850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000854:	e00a      	b.n	800086c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4908      	ldr	r1, [pc, #32]	@ (800087c <__NVIC_SetPriority+0x50>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	3b04      	subs	r3, #4
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	440b      	add	r3, r1
 800086a:	761a      	strb	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	@ 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f1c3 0307 	rsb	r3, r3, #7
 800089a:	2b04      	cmp	r3, #4
 800089c:	bf28      	it	cs
 800089e:	2304      	movcs	r3, #4
 80008a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3304      	adds	r3, #4
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d902      	bls.n	80008b0 <NVIC_EncodePriority+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3b03      	subs	r3, #3
 80008ae:	e000      	b.n	80008b2 <NVIC_EncodePriority+0x32>
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43da      	mvns	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	401a      	ands	r2, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43d9      	mvns	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	4313      	orrs	r3, r2
         );
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3724      	adds	r7, #36	@ 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008f4:	d301      	bcc.n	80008fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00f      	b.n	800091a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <SysTick_Config+0x40>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000902:	210f      	movs	r1, #15
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f7ff ff90 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <SysTick_Config+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <SysTick_Config+0x40>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff49 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000950:	f7ff ff5e 	bl	8000810 <__NVIC_GetPriorityGrouping>
 8000954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	6978      	ldr	r0, [r7, #20]
 800095c:	f7ff ff90 	bl	8000880 <NVIC_EncodePriority>
 8000960:	4602      	mov	r2, r0
 8000962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff5f 	bl	800082c <__NVIC_SetPriority>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffb0 	bl	80008e4 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b08b      	sub	sp, #44	@ 0x2c
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a2:	e169      	b.n	8000c78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a4:	2201      	movs	r2, #1
 80009a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	429a      	cmp	r2, r3
 80009be:	f040 8158 	bne.w	8000c72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	4a9a      	ldr	r2, [pc, #616]	@ (8000c30 <HAL_GPIO_Init+0x2a0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d05e      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009cc:	4a98      	ldr	r2, [pc, #608]	@ (8000c30 <HAL_GPIO_Init+0x2a0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d875      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009d2:	4a98      	ldr	r2, [pc, #608]	@ (8000c34 <HAL_GPIO_Init+0x2a4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d058      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009d8:	4a96      	ldr	r2, [pc, #600]	@ (8000c34 <HAL_GPIO_Init+0x2a4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d86f      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009de:	4a96      	ldr	r2, [pc, #600]	@ (8000c38 <HAL_GPIO_Init+0x2a8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d052      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009e4:	4a94      	ldr	r2, [pc, #592]	@ (8000c38 <HAL_GPIO_Init+0x2a8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d869      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009ea:	4a94      	ldr	r2, [pc, #592]	@ (8000c3c <HAL_GPIO_Init+0x2ac>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d04c      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009f0:	4a92      	ldr	r2, [pc, #584]	@ (8000c3c <HAL_GPIO_Init+0x2ac>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d863      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009f6:	4a92      	ldr	r2, [pc, #584]	@ (8000c40 <HAL_GPIO_Init+0x2b0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d046      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009fc:	4a90      	ldr	r2, [pc, #576]	@ (8000c40 <HAL_GPIO_Init+0x2b0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d85d      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d82a      	bhi.n	8000a5c <HAL_GPIO_Init+0xcc>
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	d859      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 8000a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a10 <HAL_GPIO_Init+0x80>)
 8000a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a10:	08000a8b 	.word	0x08000a8b
 8000a14:	08000a65 	.word	0x08000a65
 8000a18:	08000a77 	.word	0x08000a77
 8000a1c:	08000ab9 	.word	0x08000ab9
 8000a20:	08000abf 	.word	0x08000abf
 8000a24:	08000abf 	.word	0x08000abf
 8000a28:	08000abf 	.word	0x08000abf
 8000a2c:	08000abf 	.word	0x08000abf
 8000a30:	08000abf 	.word	0x08000abf
 8000a34:	08000abf 	.word	0x08000abf
 8000a38:	08000abf 	.word	0x08000abf
 8000a3c:	08000abf 	.word	0x08000abf
 8000a40:	08000abf 	.word	0x08000abf
 8000a44:	08000abf 	.word	0x08000abf
 8000a48:	08000abf 	.word	0x08000abf
 8000a4c:	08000abf 	.word	0x08000abf
 8000a50:	08000abf 	.word	0x08000abf
 8000a54:	08000a6d 	.word	0x08000a6d
 8000a58:	08000a81 	.word	0x08000a81
 8000a5c:	4a79      	ldr	r2, [pc, #484]	@ (8000c44 <HAL_GPIO_Init+0x2b4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d013      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a62:	e02c      	b.n	8000abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e029      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	3304      	adds	r3, #4
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e024      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	623b      	str	r3, [r7, #32]
          break;
 8000a7e:	e01f      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	330c      	adds	r3, #12
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e01a      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a92:	2304      	movs	r3, #4
 8000a94:	623b      	str	r3, [r7, #32]
          break;
 8000a96:	e013      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d105      	bne.n	8000aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	611a      	str	r2, [r3, #16]
          break;
 8000aaa:	e009      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	615a      	str	r2, [r3, #20]
          break;
 8000ab6:	e003      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e000      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          break;
 8000abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2bff      	cmp	r3, #255	@ 0xff
 8000ac4:	d801      	bhi.n	8000aca <HAL_GPIO_Init+0x13a>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	e001      	b.n	8000ace <HAL_GPIO_Init+0x13e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3304      	adds	r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2bff      	cmp	r3, #255	@ 0xff
 8000ad4:	d802      	bhi.n	8000adc <HAL_GPIO_Init+0x14c>
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	e002      	b.n	8000ae2 <HAL_GPIO_Init+0x152>
 8000adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ade:	3b08      	subs	r3, #8
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	210f      	movs	r1, #15
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	401a      	ands	r2, r3
 8000af4:	6a39      	ldr	r1, [r7, #32]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	431a      	orrs	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 80b1 	beq.w	8000c72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b10:	4b4d      	ldr	r3, [pc, #308]	@ (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a4c      	ldr	r2, [pc, #304]	@ (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b28:	4a48      	ldr	r2, [pc, #288]	@ (8000c4c <HAL_GPIO_Init+0x2bc>)
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d013      	beq.n	8000b7c <HAL_GPIO_Init+0x1ec>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3f      	ldr	r2, [pc, #252]	@ (8000c54 <HAL_GPIO_Init+0x2c4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d00d      	beq.n	8000b78 <HAL_GPIO_Init+0x1e8>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c58 <HAL_GPIO_Init+0x2c8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d007      	beq.n	8000b74 <HAL_GPIO_Init+0x1e4>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a3d      	ldr	r2, [pc, #244]	@ (8000c5c <HAL_GPIO_Init+0x2cc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d101      	bne.n	8000b70 <HAL_GPIO_Init+0x1e0>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e006      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b70:	2304      	movs	r3, #4
 8000b72:	e004      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b74:	2302      	movs	r3, #2
 8000b76:	e002      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b80:	f002 0203 	and.w	r2, r2, #3
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	4093      	lsls	r3, r2
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b8e:	492f      	ldr	r1, [pc, #188]	@ (8000c4c <HAL_GPIO_Init+0x2bc>)
 8000b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	492c      	ldr	r1, [pc, #176]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	608b      	str	r3, [r1, #8]
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4928      	ldr	r1, [pc, #160]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d006      	beq.n	8000bde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd0:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	4922      	ldr	r1, [pc, #136]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60cb      	str	r3, [r1, #12]
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bde:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	491e      	ldr	r1, [pc, #120]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf8:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	4918      	ldr	r1, [pc, #96]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c06:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4914      	ldr	r1, [pc, #80]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d021      	beq.n	8000c64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	490e      	ldr	r1, [pc, #56]	@ (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
 8000c2c:	e021      	b.n	8000c72 <HAL_GPIO_Init+0x2e2>
 8000c2e:	bf00      	nop
 8000c30:	10320000 	.word	0x10320000
 8000c34:	10310000 	.word	0x10310000
 8000c38:	10220000 	.word	0x10220000
 8000c3c:	10210000 	.word	0x10210000
 8000c40:	10120000 	.word	0x10120000
 8000c44:	10110000 	.word	0x10110000
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	40010800 	.word	0x40010800
 8000c54:	40010c00 	.word	0x40010c00
 8000c58:	40011000 	.word	0x40011000
 8000c5c:	40011400 	.word	0x40011400
 8000c60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_GPIO_Init+0x304>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4909      	ldr	r1, [pc, #36]	@ (8000c94 <HAL_GPIO_Init+0x304>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	3301      	adds	r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f47f ae8e 	bne.w	80009a4 <HAL_GPIO_Init+0x14>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	372c      	adds	r7, #44	@ 0x2c
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb4:	e003      	b.n	8000cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	611a      	str	r2, [r3, #16]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e272      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8087 	beq.w	8000df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce8:	4b92      	ldr	r3, [pc, #584]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d00c      	beq.n	8000d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d112      	bne.n	8000d26 <HAL_RCC_OscConfig+0x5e>
 8000d00:	4b8c      	ldr	r3, [pc, #560]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d0c:	d10b      	bne.n	8000d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0e:	4b89      	ldr	r3, [pc, #548]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d06c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x12c>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d168      	bne.n	8000df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e24c      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d2e:	d106      	bne.n	8000d3e <HAL_RCC_OscConfig+0x76>
 8000d30:	4b80      	ldr	r3, [pc, #512]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a7f      	ldr	r2, [pc, #508]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	e02e      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <HAL_RCC_OscConfig+0x98>
 8000d46:	4b7b      	ldr	r3, [pc, #492]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b78      	ldr	r3, [pc, #480]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a77      	ldr	r2, [pc, #476]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e01d      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0xbc>
 8000d6a:	4b72      	ldr	r3, [pc, #456]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a71      	ldr	r2, [pc, #452]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b6f      	ldr	r3, [pc, #444]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a6e      	ldr	r2, [pc, #440]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d84:	4b6b      	ldr	r3, [pc, #428]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a6a      	ldr	r2, [pc, #424]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b68      	ldr	r3, [pc, #416]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a67      	ldr	r2, [pc, #412]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fce2 	bl	800076c <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fcde 	bl	800076c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	@ 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e200      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0xe4>
 8000dca:	e014      	b.n	8000df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fcce 	bl	800076c <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fcca 	bl	800076c <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	@ 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e1ec      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de6:	4b53      	ldr	r3, [pc, #332]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x10c>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d063      	beq.n	8000eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e02:	4b4c      	ldr	r3, [pc, #304]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0e:	4b49      	ldr	r3, [pc, #292]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d11c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x18c>
 8000e1a:	4b46      	ldr	r3, [pc, #280]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d116      	bne.n	8000e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e26:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <HAL_RCC_OscConfig+0x176>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d001      	beq.n	8000e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e1c0      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4939      	ldr	r1, [pc, #228]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e52:	e03a      	b.n	8000eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d020      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5c:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e62:	f7ff fc83 	bl	800076c <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fc7f 	bl	800076c <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e1a1      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e88:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4927      	ldr	r1, [pc, #156]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
 8000e9c:	e015      	b.n	8000eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fc62 	bl	800076c <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eac:	f7ff fc5e 	bl	800076c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e180      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d03a      	beq.n	8000f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d019      	beq.n	8000f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <HAL_RCC_OscConfig+0x274>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fc42 	bl	800076c <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc3e 	bl	800076c <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e160      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f000 face 	bl	80014ac <RCC_Delay>
 8000f10:	e01c      	b.n	8000f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_RCC_OscConfig+0x274>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f18:	f7ff fc28 	bl	800076c <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1e:	e00f      	b.n	8000f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fc24 	bl	800076c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d908      	bls.n	8000f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e146      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	42420000 	.word	0x42420000
 8000f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f40:	4b92      	ldr	r3, [pc, #584]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1e9      	bne.n	8000f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80a6 	beq.w	80010a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10d      	bne.n	8000f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b88      	ldr	r3, [pc, #544]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a87      	ldr	r2, [pc, #540]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b85      	ldr	r3, [pc, #532]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f82:	2301      	movs	r3, #1
 8000f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f86:	4b82      	ldr	r3, [pc, #520]	@ (8001190 <HAL_RCC_OscConfig+0x4c8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d118      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f92:	4b7f      	ldr	r3, [pc, #508]	@ (8001190 <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7e      	ldr	r2, [pc, #504]	@ (8001190 <HAL_RCC_OscConfig+0x4c8>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fbe5 	bl	800076c <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa6:	f7ff fbe1 	bl	800076c <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	@ 0x64
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e103      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb8:	4b75      	ldr	r3, [pc, #468]	@ (8001190 <HAL_RCC_OscConfig+0x4c8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f0      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x312>
 8000fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6213      	str	r3, [r2, #32]
 8000fd8:	e02d      	b.n	8001036 <HAL_RCC_OscConfig+0x36e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x334>
 8000fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4a69      	ldr	r2, [pc, #420]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	6213      	str	r3, [r2, #32]
 8000fee:	4b67      	ldr	r3, [pc, #412]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a66      	ldr	r2, [pc, #408]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0304 	bic.w	r3, r3, #4
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	e01c      	b.n	8001036 <HAL_RCC_OscConfig+0x36e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b05      	cmp	r3, #5
 8001002:	d10c      	bne.n	800101e <HAL_RCC_OscConfig+0x356>
 8001004:	4b61      	ldr	r3, [pc, #388]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a60      	ldr	r2, [pc, #384]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6213      	str	r3, [r2, #32]
 8001010:	4b5e      	ldr	r3, [pc, #376]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a5d      	ldr	r2, [pc, #372]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	e00b      	b.n	8001036 <HAL_RCC_OscConfig+0x36e>
 800101e:	4b5b      	ldr	r3, [pc, #364]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a5a      	ldr	r2, [pc, #360]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	4b58      	ldr	r3, [pc, #352]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a57      	ldr	r2, [pc, #348]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 0304 	bic.w	r3, r3, #4
 8001034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d015      	beq.n	800106a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103e:	f7ff fb95 	bl	800076c <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff fb91 	bl	800076c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001054:	4293      	cmp	r3, r2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e0b1      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105c:	4b4b      	ldr	r3, [pc, #300]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0ee      	beq.n	8001046 <HAL_RCC_OscConfig+0x37e>
 8001068:	e014      	b.n	8001094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106a:	f7ff fb7f 	bl	800076c <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f7ff fb7b 	bl	800076c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e09b      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001088:	4b40      	ldr	r3, [pc, #256]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1ee      	bne.n	8001072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d105      	bne.n	80010a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800109a:	4b3c      	ldr	r3, [pc, #240]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a3b      	ldr	r2, [pc, #236]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8087 	beq.w	80011be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b0:	4b36      	ldr	r3, [pc, #216]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d061      	beq.n	8001180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d146      	bne.n	8001152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c4:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <HAL_RCC_OscConfig+0x4cc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb4f 	bl	800076c <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff fb4b 	bl	800076c <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e06d      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f0      	bne.n	80010d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f8:	d108      	bne.n	800110c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010fa:	4b24      	ldr	r3, [pc, #144]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	4921      	ldr	r1, [pc, #132]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a19      	ldr	r1, [r3, #32]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	430b      	orrs	r3, r1
 800111e:	491b      	ldr	r1, [pc, #108]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <HAL_RCC_OscConfig+0x4cc>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fb1f 	bl	800076c <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001132:	f7ff fb1b 	bl	800076c <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e03d      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x46a>
 8001150:	e035      	b.n	80011be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_RCC_OscConfig+0x4cc>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fb08 	bl	800076c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff fb04 	bl	800076c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e026      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_RCC_OscConfig+0x4c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x498>
 800117e:	e01e      	b.n	80011be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d107      	bne.n	8001198 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e019      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
 800118c:	40021000 	.word	0x40021000
 8001190:	40007000 	.word	0x40007000
 8001194:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_RCC_OscConfig+0x500>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0d0      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4b6a      	ldr	r3, [pc, #424]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d910      	bls.n	8001210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b67      	ldr	r3, [pc, #412]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0207 	bic.w	r2, r3, #7
 80011f6:	4965      	ldr	r1, [pc, #404]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a58      	ldr	r2, [pc, #352]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800124a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d040      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e073      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e06b      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4936      	ldr	r1, [pc, #216]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fa56 	bl	800076c <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fa52 	bl	800076c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e053      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d210      	bcs.n	800131c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 0207 	bic.w	r2, r3, #7
 8001302:	4922      	ldr	r1, [pc, #136]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f821 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	490a      	ldr	r1, [pc, #40]	@ (8001394 <HAL_RCC_ClockConfig+0x1c8>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1cc>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_RCC_ClockConfig+0x1d0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f9b4 	bl	80006e8 <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40022000 	.word	0x40022000
 8001390:	40021000 	.word	0x40021000
 8001394:	08001cc8 	.word	0x08001cc8
 8001398:	2000000c 	.word	0x2000000c
 800139c:	20000010 	.word	0x20000010

080013a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x94>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d002      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d003      	beq.n	80013d6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ce:	e027      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_RCC_GetSysClockFreq+0x98>)
 80013d2:	613b      	str	r3, [r7, #16]
      break;
 80013d4:	e027      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	0c9b      	lsrs	r3, r3, #18
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d010      	beq.n	8001410 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x94>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	0c5b      	lsrs	r3, r3, #17
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a0d      	ldr	r2, [pc, #52]	@ (8001438 <HAL_RCC_GetSysClockFreq+0x98>)
 8001402:	fb03 f202 	mul.w	r2, r3, r2
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e004      	b.n	800141a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	613b      	str	r3, [r7, #16]
      break;
 800141e:	e002      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_RCC_GetSysClockFreq+0x98>)
 8001422:	613b      	str	r3, [r7, #16]
      break;
 8001424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001426:	693b      	ldr	r3, [r7, #16]
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	007a1200 	.word	0x007a1200
 800143c:	08001ce0 	.word	0x08001ce0
 8001440:	08001cf0 	.word	0x08001cf0
 8001444:	003d0900 	.word	0x003d0900

08001448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800144c:	4b02      	ldr	r3, [pc, #8]	@ (8001458 <HAL_RCC_GetHCLKFreq+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	2000000c 	.word	0x2000000c

0800145c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001460:	f7ff fff2 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4903      	ldr	r1, [pc, #12]	@ (8001480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001472:	5ccb      	ldrb	r3, [r1, r3]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	08001cd8 	.word	0x08001cd8

08001484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001488:	f7ff ffde 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 800148c:	4602      	mov	r2, r0
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	0adb      	lsrs	r3, r3, #11
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	4903      	ldr	r1, [pc, #12]	@ (80014a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800149a:	5ccb      	ldrb	r3, [r1, r3]
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08001cd8 	.word	0x08001cd8

080014ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <RCC_Delay+0x34>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <RCC_Delay+0x38>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0a5b      	lsrs	r3, r3, #9
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014c8:	bf00      	nop
  }
  while (Delay --);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f9      	bne.n	80014c8 <RCC_Delay+0x1c>
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	2000000c 	.word	0x2000000c
 80014e4:	10624dd3 	.word	0x10624dd3

080014e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e076      	b.n	80015e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d108      	bne.n	8001514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800150a:	d009      	beq.n	8001520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	e005      	b.n	8001520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7fe ff74 	bl	8000428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a4:	ea42 0103 	orr.w	r1, r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	0c1a      	lsrs	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f002 0204 	and.w	r2, r2, #4
 80015c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80015fe:	2301      	movs	r3, #1
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_SPI_TransmitReceive+0x26>
 8001612:	2302      	movs	r3, #2
 8001614:	e198      	b.n	8001948 <HAL_SPI_TransmitReceive+0x358>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800161e:	f7ff f8a5 	bl	800076c <HAL_GetTick>
 8001622:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800162a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001638:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800163c:	2b01      	cmp	r3, #1
 800163e:	d00f      	beq.n	8001660 <HAL_SPI_TransmitReceive+0x70>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001646:	d107      	bne.n	8001658 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <HAL_SPI_TransmitReceive+0x68>
 8001650:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001654:	2b04      	cmp	r3, #4
 8001656:	d003      	beq.n	8001660 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001658:	2302      	movs	r3, #2
 800165a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800165e:	e16d      	b.n	800193c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_SPI_TransmitReceive+0x82>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_SPI_TransmitReceive+0x82>
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001678:	e160      	b.n	800193c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b04      	cmp	r3, #4
 8001684:	d003      	beq.n	800168e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2205      	movs	r2, #5
 800168a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	887a      	ldrh	r2, [r7, #2]
 80016b6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ce:	2b40      	cmp	r3, #64	@ 0x40
 80016d0:	d007      	beq.n	80016e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ea:	d17c      	bne.n	80017e6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_SPI_TransmitReceive+0x10a>
 80016f4:	8b7b      	ldrh	r3, [r7, #26]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d16a      	bne.n	80017d0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	881a      	ldrh	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	1c9a      	adds	r2, r3, #2
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800171e:	e057      	b.n	80017d0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	d11b      	bne.n	8001766 <HAL_SPI_TransmitReceive+0x176>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d016      	beq.n	8001766 <HAL_SPI_TransmitReceive+0x176>
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	2b01      	cmp	r3, #1
 800173c:	d113      	bne.n	8001766 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	1c9a      	adds	r2, r3, #2
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d119      	bne.n	80017a8 <HAL_SPI_TransmitReceive+0x1b8>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001778:	b29b      	uxth	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d014      	beq.n	80017a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001788:	b292      	uxth	r2, r2
 800178a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001790:	1c9a      	adds	r2, r3, #2
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80017a8:	f7fe ffe0 	bl	800076c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d80b      	bhi.n	80017d0 <HAL_SPI_TransmitReceive+0x1e0>
 80017b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017be:	d007      	beq.n	80017d0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80017ce:	e0b5      	b.n	800193c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1a2      	bne.n	8001720 <HAL_SPI_TransmitReceive+0x130>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d19d      	bne.n	8001720 <HAL_SPI_TransmitReceive+0x130>
 80017e4:	e080      	b.n	80018e8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_SPI_TransmitReceive+0x204>
 80017ee:	8b7b      	ldrh	r3, [r7, #26]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d16f      	bne.n	80018d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	330c      	adds	r3, #12
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800181a:	e05b      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b02      	cmp	r3, #2
 8001828:	d11c      	bne.n	8001864 <HAL_SPI_TransmitReceive+0x274>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d017      	beq.n	8001864 <HAL_SPI_TransmitReceive+0x274>
 8001834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001836:	2b01      	cmp	r3, #1
 8001838:	d114      	bne.n	8001864 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	330c      	adds	r3, #12
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d119      	bne.n	80018a6 <HAL_SPI_TransmitReceive+0x2b6>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d014      	beq.n	80018a6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80018a6:	f7fe ff61 	bl	800076c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d803      	bhi.n	80018be <HAL_SPI_TransmitReceive+0x2ce>
 80018b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d102      	bne.n	80018c4 <HAL_SPI_TransmitReceive+0x2d4>
 80018be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80018d2:	e033      	b.n	800193c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d19e      	bne.n	800181c <HAL_SPI_TransmitReceive+0x22c>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d199      	bne.n	800181c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f8b7 	bl	8001a60 <SPI_EndRxTxTransaction>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2220      	movs	r2, #32
 8001902:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8001904:	e01a      	b.n	800193c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001932:	e003      	b.n	800193c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001944:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001948:	4618      	mov	r0, r3
 800194a:	3730      	adds	r7, #48	@ 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001960:	f7fe ff04 	bl	800076c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001970:	f7fe fefc 	bl	800076c <HAL_GetTick>
 8001974:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001976:	4b39      	ldr	r3, [pc, #228]	@ (8001a5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	015b      	lsls	r3, r3, #5
 800197c:	0d1b      	lsrs	r3, r3, #20
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001986:	e054      	b.n	8001a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198e:	d050      	beq.n	8001a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001990:	f7fe feec 	bl	800076c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	d902      	bls.n	80019a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d13d      	bne.n	8001a22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80019b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019be:	d111      	bne.n	80019e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019c8:	d004      	beq.n	80019d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d2:	d107      	bne.n	80019e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ec:	d10f      	bne.n	8001a0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e017      	b.n	8001a52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	bf0c      	ite	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2300      	movne	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d19b      	bne.n	8001988 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000000c 	.word	0x2000000c

08001a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff ff6a 	bl	8001950 <SPI_WaitFlagStateUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a86:	f043 0220 	orr.w	r2, r3, #32
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e000      	b.n	8001a94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e042      	b.n	8001b34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fd88 	bl	80005d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2224      	movs	r2, #36	@ 0x24
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f82b 	bl	8001b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001b76:	f023 030c 	bic.w	r3, r3, #12
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c50 <UART_SetConfig+0x114>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d103      	bne.n	8001bac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ba4:	f7ff fc6e 	bl	8001484 <HAL_RCC_GetPCLK2Freq>
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	e002      	b.n	8001bb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bac:	f7ff fc56 	bl	800145c <HAL_RCC_GetPCLK1Freq>
 8001bb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	009a      	lsls	r2, r3, #2
 8001bbc:	441a      	add	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	4a22      	ldr	r2, [pc, #136]	@ (8001c54 <UART_SetConfig+0x118>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	0119      	lsls	r1, r3, #4
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	009a      	lsls	r2, r3, #2
 8001bdc:	441a      	add	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <UART_SetConfig+0x118>)
 8001bea:	fba3 0302 	umull	r0, r3, r3, r2
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2064      	movs	r0, #100	@ 0x64
 8001bf2:	fb00 f303 	mul.w	r3, r0, r3
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	3332      	adds	r3, #50	@ 0x32
 8001bfc:	4a15      	ldr	r2, [pc, #84]	@ (8001c54 <UART_SetConfig+0x118>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c08:	4419      	add	r1, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	009a      	lsls	r2, r3, #2
 8001c14:	441a      	add	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <UART_SetConfig+0x118>)
 8001c22:	fba3 0302 	umull	r0, r3, r3, r2
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2064      	movs	r0, #100	@ 0x64
 8001c2a:	fb00 f303 	mul.w	r3, r0, r3
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	3332      	adds	r3, #50	@ 0x32
 8001c34:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <UART_SetConfig+0x118>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	f003 020f 	and.w	r2, r3, #15
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	440a      	add	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40013800 	.word	0x40013800
 8001c54:	51eb851f 	.word	0x51eb851f

08001c58 <memset>:
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4402      	add	r2, r0
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d100      	bne.n	8001c62 <memset+0xa>
 8001c60:	4770      	bx	lr
 8001c62:	f803 1b01 	strb.w	r1, [r3], #1
 8001c66:	e7f9      	b.n	8001c5c <memset+0x4>

08001c68 <__libc_init_array>:
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	2600      	movs	r6, #0
 8001c6c:	4d0c      	ldr	r5, [pc, #48]	@ (8001ca0 <__libc_init_array+0x38>)
 8001c6e:	4c0d      	ldr	r4, [pc, #52]	@ (8001ca4 <__libc_init_array+0x3c>)
 8001c70:	1b64      	subs	r4, r4, r5
 8001c72:	10a4      	asrs	r4, r4, #2
 8001c74:	42a6      	cmp	r6, r4
 8001c76:	d109      	bne.n	8001c8c <__libc_init_array+0x24>
 8001c78:	f000 f81a 	bl	8001cb0 <_init>
 8001c7c:	2600      	movs	r6, #0
 8001c7e:	4d0a      	ldr	r5, [pc, #40]	@ (8001ca8 <__libc_init_array+0x40>)
 8001c80:	4c0a      	ldr	r4, [pc, #40]	@ (8001cac <__libc_init_array+0x44>)
 8001c82:	1b64      	subs	r4, r4, r5
 8001c84:	10a4      	asrs	r4, r4, #2
 8001c86:	42a6      	cmp	r6, r4
 8001c88:	d105      	bne.n	8001c96 <__libc_init_array+0x2e>
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
 8001c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c90:	4798      	blx	r3
 8001c92:	3601      	adds	r6, #1
 8001c94:	e7ee      	b.n	8001c74 <__libc_init_array+0xc>
 8001c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c9a:	4798      	blx	r3
 8001c9c:	3601      	adds	r6, #1
 8001c9e:	e7f2      	b.n	8001c86 <__libc_init_array+0x1e>
 8001ca0:	08001cf4 	.word	0x08001cf4
 8001ca4:	08001cf4 	.word	0x08001cf4
 8001ca8:	08001cf4 	.word	0x08001cf4
 8001cac:	08001cf8 	.word	0x08001cf8

08001cb0 <_init>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr

08001cbc <_fini>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	bf00      	nop
 8001cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc2:	bc08      	pop	{r3}
 8001cc4:	469e      	mov	lr, r3
 8001cc6:	4770      	bx	lr
