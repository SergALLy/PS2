
PS2_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002e04  08002e04  00003e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ecc  08002ecc  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ecc  08002ecc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ed0  08002ed0  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002ed4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08002f30  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08002f30  00004268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008959  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fc  00000000  00000000  0000c9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0000e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000682  00000000  00000000  0000ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a0f  00000000  00000000  0000f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b681  00000000  00000000  00025d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e8f  00000000  00000000  00031382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  000b3254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000b58c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dec 	.word	0x08002dec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002dec 	.word	0x08002dec

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b11      	ldr	r3, [pc, #68]	@ (80001a8 <MX_GPIO_Init+0x5c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a10      	ldr	r2, [pc, #64]	@ (80001a8 <MX_GPIO_Init+0x5c>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b0e      	ldr	r3, [pc, #56]	@ (80001a8 <MX_GPIO_Init+0x5c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2110      	movs	r1, #16
 800017c:	480b      	ldr	r0, [pc, #44]	@ (80001ac <MX_GPIO_Init+0x60>)
 800017e:	f000 fe05 	bl	8000d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000182:	2310      	movs	r3, #16
 8000184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000186:	2301      	movs	r3, #1
 8000188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800018a:	2300      	movs	r3, #0
 800018c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800018e:	2302      	movs	r3, #2
 8000190:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000192:	f107 0308 	add.w	r3, r7, #8
 8000196:	4619      	mov	r1, r3
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <MX_GPIO_Init+0x60>)
 800019a:	f000 fc73 	bl	8000a84 <HAL_GPIO_Init>

}
 800019e:	bf00      	nop
 80001a0:	3718      	adds	r7, #24
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000
 80001ac:	40010800 	.word	0x40010800

080001b0 <PS2_Cmd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PS2_Cmd(uint8_t* TxData, uint8_t* RxData, uint8_t size)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	4613      	mov	r3, r2
 80001bc:	71fb      	strb	r3, [r7, #7]
	if (RxData == NULL)
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d107      	bne.n	80001d4 <PS2_Cmd+0x24>
		HAL_SPI_Transmit(&hspi1, TxData, size, 100);
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	2364      	movs	r3, #100	@ 0x64
 80001ca:	68f9      	ldr	r1, [r7, #12]
 80001cc:	4808      	ldr	r0, [pc, #32]	@ (80001f0 <PS2_Cmd+0x40>)
 80001ce:	f001 fa89 	bl	80016e4 <HAL_SPI_Transmit>
	else
		HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, size, 100);

}
 80001d2:	e008      	b.n	80001e6 <PS2_Cmd+0x36>
		HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, size, 100);
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	b29b      	uxth	r3, r3
 80001d8:	2264      	movs	r2, #100	@ 0x64
 80001da:	9200      	str	r2, [sp, #0]
 80001dc:	68ba      	ldr	r2, [r7, #8]
 80001de:	68f9      	ldr	r1, [r7, #12]
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <PS2_Cmd+0x40>)
 80001e2:	f001 fcda 	bl	8001b9a <HAL_SPI_TransmitReceive>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000078 	.word	0x20000078

080001f4 <PS2_Init>:
	PS2_Cmd(0x5A, NULL,1);
	CS_H;
}

void PS2_Init ()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08e      	sub	sp, #56	@ 0x38
 80001f8:	af00      	add	r7, sp, #0
	uint8_t ShortPoll[5] = {0x01, 0x42, 0x00, 0x00, 0x00};
 80001fa:	4a2a      	ldr	r2, [pc, #168]	@ (80002a4 <PS2_Init+0xb0>)
 80001fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000204:	6018      	str	r0, [r3, #0]
 8000206:	3304      	adds	r3, #4
 8000208:	7019      	strb	r1, [r3, #0]
	uint8_t EnterConfig[9] = {0x01, 0x43, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
 800020a:	4a27      	ldr	r2, [pc, #156]	@ (80002a8 <PS2_Init+0xb4>)
 800020c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000210:	ca07      	ldmia	r2, {r0, r1, r2}
 8000212:	c303      	stmia	r3!, {r0, r1}
 8000214:	701a      	strb	r2, [r3, #0]
	uint8_t Setup[9] = {0x01, 0x44, 0x00, 0x01, 0xEE, 0x00, 0x00, 0x00, 0x00};
 8000216:	4a25      	ldr	r2, [pc, #148]	@ (80002ac <PS2_Init+0xb8>)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	ca07      	ldmia	r2, {r0, r1, r2}
 800021e:	c303      	stmia	r3!, {r0, r1}
 8000220:	701a      	strb	r2, [r3, #0]
	uint8_t VibrationMode[5] = {0x01, 0x04D, 0x00, 0x00, 0x01};
 8000222:	4a23      	ldr	r2, [pc, #140]	@ (80002b0 <PS2_Init+0xbc>)
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800022c:	6018      	str	r0, [r3, #0]
 800022e:	3304      	adds	r3, #4
 8000230:	7019      	strb	r1, [r3, #0]
	uint8_t ExitConfig[9] = {0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
 8000232:	4a20      	ldr	r2, [pc, #128]	@ (80002b4 <PS2_Init+0xc0>)
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	ca07      	ldmia	r2, {r0, r1, r2}
 8000238:	c303      	stmia	r3!, {r0, r1}
 800023a:	701a      	strb	r2, [r3, #0]

	PS2_Cmd(ShortPoll, NULL, 5);
 800023c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000240:	2205      	movs	r2, #5
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffb3 	bl	80001b0 <PS2_Cmd>
	PS2_Cmd(ShortPoll, NULL, 5);
 800024a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800024e:	2205      	movs	r2, #5
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ffac 	bl	80001b0 <PS2_Cmd>
	PS2_Cmd(ShortPoll, NULL, 5);
 8000258:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800025c:	2205      	movs	r2, #5
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ffa5 	bl	80001b0 <PS2_Cmd>
	PS2_Cmd(EnterConfig, NULL, 9);
 8000266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800026a:	2209      	movs	r2, #9
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ff9e 	bl	80001b0 <PS2_Cmd>
	PS2_Cmd(Setup, NULL, 9);
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	2209      	movs	r2, #9
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ff97 	bl	80001b0 <PS2_Cmd>
	PS2_Cmd(VibrationMode, NULL, 5);
 8000282:	f107 0310 	add.w	r3, r7, #16
 8000286:	2205      	movs	r2, #5
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ff90 	bl	80001b0 <PS2_Cmd>
	PS2_Cmd(ExitConfig, NULL, 9);
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2209      	movs	r2, #9
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff8a 	bl	80001b0 <PS2_Cmd>
}
 800029c:	bf00      	nop
 800029e:	3738      	adds	r7, #56	@ 0x38
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08002e04 	.word	0x08002e04
 80002a8:	08002e0c 	.word	0x08002e0c
 80002ac:	08002e18 	.word	0x08002e18
 80002b0:	08002e24 	.word	0x08002e24
 80002b4:	08002e2c 	.word	0x08002e2c

080002b8 <PS2_Start>:

void PS2_Start(uint8_t* ID)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	CS_H; CS_L;
 80002c0:	2201      	movs	r2, #1
 80002c2:	2110      	movs	r1, #16
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <PS2_Start+0x44>)
 80002c6:	f000 fd61 	bl	8000d8c <HAL_GPIO_WritePin>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	480b      	ldr	r0, [pc, #44]	@ (80002fc <PS2_Start+0x44>)
 80002d0:	f000 fd5c 	bl	8000d8c <HAL_GPIO_WritePin>
	PS2_Cmd(0x01, NULL, 1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2100      	movs	r1, #0
 80002d8:	2001      	movs	r0, #1
 80002da:	f7ff ff69 	bl	80001b0 <PS2_Cmd>
	PS2_Cmd(0x42, ID, 1);
 80002de:	2201      	movs	r2, #1
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	2042      	movs	r0, #66	@ 0x42
 80002e4:	f7ff ff64 	bl	80001b0 <PS2_Cmd>
	CS_H;
 80002e8:	2201      	movs	r2, #1
 80002ea:	2110      	movs	r1, #16
 80002ec:	4803      	ldr	r0, [pc, #12]	@ (80002fc <PS2_Start+0x44>)
 80002ee:	f000 fd4d 	bl	8000d8c <HAL_GPIO_WritePin>
}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00

08000300 <PS2_ReadData>:

void PS2_ReadData(uint8_t *data, uint8_t* id)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	CS_H; CS_L;
 800030a:	2201      	movs	r2, #1
 800030c:	2110      	movs	r1, #16
 800030e:	480d      	ldr	r0, [pc, #52]	@ (8000344 <PS2_ReadData+0x44>)
 8000310:	f000 fd3c 	bl	8000d8c <HAL_GPIO_WritePin>
 8000314:	2200      	movs	r2, #0
 8000316:	2110      	movs	r1, #16
 8000318:	480a      	ldr	r0, [pc, #40]	@ (8000344 <PS2_ReadData+0x44>)
 800031a:	f000 fd37 	bl	8000d8c <HAL_GPIO_WritePin>
	PS2_Start(id);
 800031e:	6838      	ldr	r0, [r7, #0]
 8000320:	f7ff ffca 	bl	80002b8 <PS2_Start>
	HAL_SPI_Receive(&hspi1, data, 7, 100);
 8000324:	2364      	movs	r3, #100	@ 0x64
 8000326:	2207      	movs	r2, #7
 8000328:	6879      	ldr	r1, [r7, #4]
 800032a:	4807      	ldr	r0, [pc, #28]	@ (8000348 <PS2_ReadData+0x48>)
 800032c:	f001 fb1d 	bl	800196a <HAL_SPI_Receive>
	CS_H;
 8000330:	2201      	movs	r2, #1
 8000332:	2110      	movs	r1, #16
 8000334:	4803      	ldr	r0, [pc, #12]	@ (8000344 <PS2_ReadData+0x44>)
 8000336:	f000 fd29 	bl	8000d8c <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00
 8000348:	20000078 	.word	0x20000078

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800034e:	b09b      	sub	sp, #108	@ 0x6c
 8000350:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000352:	f000 fa51 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000356:	f000 f857 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035a:	f7ff fef7 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 800035e:	f000 f895 	bl	800048c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000362:	f000 f9ad 	bl	80006c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PS2_Init();
 8000366:	f7ff ff45 	bl	80001f4 <PS2_Init>
  uint8_t Data[7] ={0};
 800036a:	2300      	movs	r3, #0
 800036c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800036e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000372:	2100      	movs	r1, #0
 8000374:	460a      	mov	r2, r1
 8000376:	801a      	strh	r2, [r3, #0]
 8000378:	460a      	mov	r2, r1
 800037a:	709a      	strb	r2, [r3, #2]
  uint8_t str[64];
  uint8_t ID = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  PS2_ReadData(Data, &ID);
 8000380:	1dfa      	adds	r2, r7, #7
 8000382:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000386:	4611      	mov	r1, r2
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ffb9 	bl	8000300 <PS2_ReadData>
	  sprintf(str,"Режим: %x\n", ID);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	461a      	mov	r2, r3
 8000392:	f107 0308 	add.w	r3, r7, #8
 8000396:	4919      	ldr	r1, [pc, #100]	@ (80003fc <main+0xb0>)
 8000398:	4618      	mov	r0, r3
 800039a:	f002 f877 	bl	800248c <siprintf>
	  HAL_UART_Transmit(&huart1, str, 64, 100);
 800039e:	f107 0108 	add.w	r1, r7, #8
 80003a2:	2364      	movs	r3, #100	@ 0x64
 80003a4:	2240      	movs	r2, #64	@ 0x40
 80003a6:	4816      	ldr	r0, [pc, #88]	@ (8000400 <main+0xb4>)
 80003a8:	f001 fef0 	bl	800218c <HAL_UART_Transmit>
	  sprintf(str,"Данные: %x %x %x %x %x %x %x\n", Data[0], Data[1], Data[2], Data[3], Data[4], Data[5], Data[6]);
 80003ac:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80003b0:	461e      	mov	r6, r3
 80003b2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80003b6:	469c      	mov	ip, r3
 80003b8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80003bc:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80003c0:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 80003c4:	f897 004d 	ldrb.w	r0, [r7, #77]	@ 0x4d
 80003c8:	4604      	mov	r4, r0
 80003ca:	f897 004e 	ldrb.w	r0, [r7, #78]	@ 0x4e
 80003ce:	4605      	mov	r5, r0
 80003d0:	f107 0008 	add.w	r0, r7, #8
 80003d4:	9504      	str	r5, [sp, #16]
 80003d6:	9403      	str	r4, [sp, #12]
 80003d8:	9102      	str	r1, [sp, #8]
 80003da:	9201      	str	r2, [sp, #4]
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	4663      	mov	r3, ip
 80003e0:	4632      	mov	r2, r6
 80003e2:	4908      	ldr	r1, [pc, #32]	@ (8000404 <main+0xb8>)
 80003e4:	f002 f852 	bl	800248c <siprintf>
	  HAL_UART_Transmit(&huart1, str, 64, 100);
 80003e8:	f107 0108 	add.w	r1, r7, #8
 80003ec:	2364      	movs	r3, #100	@ 0x64
 80003ee:	2240      	movs	r2, #64	@ 0x40
 80003f0:	4803      	ldr	r0, [pc, #12]	@ (8000400 <main+0xb4>)
 80003f2:	f001 fecb 	bl	800218c <HAL_UART_Transmit>
  {
 80003f6:	bf00      	nop
 80003f8:	e7c2      	b.n	8000380 <main+0x34>
 80003fa:	bf00      	nop
 80003fc:	08002e38 	.word	0x08002e38
 8000400:	200000d4 	.word	0x200000d4
 8000404:	08002e48 	.word	0x08002e48

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	@ 0x40
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 f858 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	2301      	movs	r3, #1
 8000430:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	2310      	movs	r3, #16
 8000434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000436:	2300      	movs	r3, #0
 8000438:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f107 0318 	add.w	r3, r7, #24
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fcbc 	bl	8000dbc <HAL_RCC_OscConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800044a:	f000 f818 	bl	800047e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044e:	230f      	movs	r3, #15
 8000450:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000452:	2300      	movs	r3, #0
 8000454:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f000 ff2a 	bl	80012c0 <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000472:	f000 f804 	bl	800047e <Error_Handler>
  }
}
 8000476:	bf00      	nop
 8000478:	3740      	adds	r7, #64	@ 0x40
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000482:	b672      	cpsid	i
}
 8000484:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <Error_Handler+0x8>
	...

0800048c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000490:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_SPI1_Init+0x64>)
 8000492:	4a18      	ldr	r2, [pc, #96]	@ (80004f4 <MX_SPI1_Init+0x68>)
 8000494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000496:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_SPI1_Init+0x64>)
 8000498:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800049c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049e:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004a4:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004aa:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004c0:	2220      	movs	r2, #32
 80004c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004d8:	220a      	movs	r2, #10
 80004da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <MX_SPI1_Init+0x64>)
 80004de:	f001 f87d 	bl	80015dc <HAL_SPI_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004e8:	f7ff ffc9 	bl	800047e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000078 	.word	0x20000078
 80004f4:	40013000 	.word	0x40013000

080004f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a1b      	ldr	r2, [pc, #108]	@ (8000580 <HAL_SPI_MspInit+0x88>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d12f      	bne.n	8000578 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000518:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <HAL_SPI_MspInit+0x8c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a19      	ldr	r2, [pc, #100]	@ (8000584 <HAL_SPI_MspInit+0x8c>)
 800051e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <HAL_SPI_MspInit+0x8c>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <HAL_SPI_MspInit+0x8c>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a13      	ldr	r2, [pc, #76]	@ (8000584 <HAL_SPI_MspInit+0x8c>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <HAL_SPI_MspInit+0x8c>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000548:	23a0      	movs	r3, #160	@ 0xa0
 800054a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	2302      	movs	r3, #2
 800054e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000550:	2303      	movs	r3, #3
 8000552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	480b      	ldr	r0, [pc, #44]	@ (8000588 <HAL_SPI_MspInit+0x90>)
 800055c:	f000 fa92 	bl	8000a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <HAL_SPI_MspInit+0x90>)
 8000574:	f000 fa86 	bl	8000a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013000 	.word	0x40013000
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <HAL_MspInit+0x5c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4a14      	ldr	r2, [pc, #80]	@ (80005e8 <HAL_MspInit+0x5c>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6193      	str	r3, [r2, #24]
 800059e:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <HAL_MspInit+0x5c>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_MspInit+0x5c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <HAL_MspInit+0x5c>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	61d3      	str	r3, [r2, #28]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_MspInit+0x5c>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <HAL_MspInit+0x60>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <HAL_MspInit+0x60>)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010000 	.word	0x40010000

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <NMI_Handler+0x4>

080005f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <MemManage_Handler+0x4>

08000608 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <UsageFault_Handler+0x4>

08000618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f920 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f001 ff30 	bl	80024dc <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20005000 	.word	0x20005000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	200000d0 	.word	0x200000d0
 80006b0:	20000268 	.word	0x20000268

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_USART1_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006f8:	f001 fcf8 	bl	80020ec <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f7ff febc 	bl	800047e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000d4 	.word	0x200000d4
 8000710:	40013800 	.word	0x40013800

08000714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <HAL_UART_MspInit+0x8c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d131      	bne.n	8000798 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <HAL_UART_MspInit+0x94>)
 800077a:	f000 f983 	bl	8000a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800077e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <HAL_UART_MspInit+0x94>)
 8000794:	f000 f976 	bl	8000a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff ff82 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007b2:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b4:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a09      	ldr	r2, [pc, #36]	@ (80007ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c8:	4c09      	ldr	r4, [pc, #36]	@ (80007f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f001 fe87 	bl	80024e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fdb7 	bl	800034c <main>
  bx lr
 80007de:	4770      	bx	lr
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007e8:	08002ed4 	.word	0x08002ed4
  ldr r2, =_sbss
 80007ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007f0:	20000268 	.word	0x20000268

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_Init+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <HAL_Init+0x28>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f907 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080e:	200f      	movs	r0, #15
 8000810:	f000 f808 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000814:	f7ff feba 	bl	800058c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40022000 	.word	0x40022000

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_InitTick+0x54>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_InitTick+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083a:	fbb3 f3f1 	udiv	r3, r3, r1
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f911 	bl	8000a6a <HAL_SYSTICK_Config>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e00e      	b.n	8000870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d80a      	bhi.n	800086e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f8e7 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4a06      	ldr	r2, [pc, #24]	@ (8000880 <HAL_InitTick+0x5c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <HAL_IncTick+0x20>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	20000008 	.word	0x20000008
 80008a4:	2000011c 	.word	0x2000011c

080008a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	@ (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	2000011c 	.word	0x2000011c

080008bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <__NVIC_GetPriorityGrouping+0x18>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	f003 0307 	and.w	r3, r3, #7
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	@ (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	@ (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	@ 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f7ff ff90 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff49 	bl	80008bc <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff5e 	bl	8000904 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff90 	bl	8000974 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5f 	bl	8000920 <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ffb0 	bl	80009d8 <SysTick_Config>
 8000a78:	4603      	mov	r3, r0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b08b      	sub	sp, #44	@ 0x2c
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	e169      	b.n	8000d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	f040 8158 	bne.w	8000d66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4a9a      	ldr	r2, [pc, #616]	@ (8000d24 <HAL_GPIO_Init+0x2a0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d05e      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000ac0:	4a98      	ldr	r2, [pc, #608]	@ (8000d24 <HAL_GPIO_Init+0x2a0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d875      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000ac6:	4a98      	ldr	r2, [pc, #608]	@ (8000d28 <HAL_GPIO_Init+0x2a4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d058      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000acc:	4a96      	ldr	r2, [pc, #600]	@ (8000d28 <HAL_GPIO_Init+0x2a4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d86f      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000ad2:	4a96      	ldr	r2, [pc, #600]	@ (8000d2c <HAL_GPIO_Init+0x2a8>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d052      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000ad8:	4a94      	ldr	r2, [pc, #592]	@ (8000d2c <HAL_GPIO_Init+0x2a8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d869      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000ade:	4a94      	ldr	r2, [pc, #592]	@ (8000d30 <HAL_GPIO_Init+0x2ac>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d04c      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <HAL_GPIO_Init+0x2ac>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d863      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000aea:	4a92      	ldr	r2, [pc, #584]	@ (8000d34 <HAL_GPIO_Init+0x2b0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d046      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
 8000af0:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <HAL_GPIO_Init+0x2b0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d85d      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000af6:	2b12      	cmp	r3, #18
 8000af8:	d82a      	bhi.n	8000b50 <HAL_GPIO_Init+0xcc>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d859      	bhi.n	8000bb2 <HAL_GPIO_Init+0x12e>
 8000afe:	a201      	add	r2, pc, #4	@ (adr r2, 8000b04 <HAL_GPIO_Init+0x80>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b7f 	.word	0x08000b7f
 8000b08:	08000b59 	.word	0x08000b59
 8000b0c:	08000b6b 	.word	0x08000b6b
 8000b10:	08000bad 	.word	0x08000bad
 8000b14:	08000bb3 	.word	0x08000bb3
 8000b18:	08000bb3 	.word	0x08000bb3
 8000b1c:	08000bb3 	.word	0x08000bb3
 8000b20:	08000bb3 	.word	0x08000bb3
 8000b24:	08000bb3 	.word	0x08000bb3
 8000b28:	08000bb3 	.word	0x08000bb3
 8000b2c:	08000bb3 	.word	0x08000bb3
 8000b30:	08000bb3 	.word	0x08000bb3
 8000b34:	08000bb3 	.word	0x08000bb3
 8000b38:	08000bb3 	.word	0x08000bb3
 8000b3c:	08000bb3 	.word	0x08000bb3
 8000b40:	08000bb3 	.word	0x08000bb3
 8000b44:	08000bb3 	.word	0x08000bb3
 8000b48:	08000b61 	.word	0x08000b61
 8000b4c:	08000b75 	.word	0x08000b75
 8000b50:	4a79      	ldr	r2, [pc, #484]	@ (8000d38 <HAL_GPIO_Init+0x2b4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d013      	beq.n	8000b7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b56:	e02c      	b.n	8000bb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	623b      	str	r3, [r7, #32]
          break;
 8000b5e:	e029      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	3304      	adds	r3, #4
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	e024      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	3308      	adds	r3, #8
 8000b70:	623b      	str	r3, [r7, #32]
          break;
 8000b72:	e01f      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	330c      	adds	r3, #12
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e01a      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b86:	2304      	movs	r3, #4
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e013      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d105      	bne.n	8000ba0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b94:	2308      	movs	r3, #8
 8000b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	611a      	str	r2, [r3, #16]
          break;
 8000b9e:	e009      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	615a      	str	r2, [r3, #20]
          break;
 8000baa:	e003      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	e000      	b.n	8000bb4 <HAL_GPIO_Init+0x130>
          break;
 8000bb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2bff      	cmp	r3, #255	@ 0xff
 8000bb8:	d801      	bhi.n	8000bbe <HAL_GPIO_Init+0x13a>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	e001      	b.n	8000bc2 <HAL_GPIO_Init+0x13e>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2bff      	cmp	r3, #255	@ 0xff
 8000bc8:	d802      	bhi.n	8000bd0 <HAL_GPIO_Init+0x14c>
 8000bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	e002      	b.n	8000bd6 <HAL_GPIO_Init+0x152>
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	3b08      	subs	r3, #8
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	210f      	movs	r1, #15
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	401a      	ands	r2, r3
 8000be8:	6a39      	ldr	r1, [r7, #32]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 80b1 	beq.w	8000d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c04:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <HAL_GPIO_Init+0x2b8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a4c      	ldr	r2, [pc, #304]	@ (8000d3c <HAL_GPIO_Init+0x2b8>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b4a      	ldr	r3, [pc, #296]	@ (8000d3c <HAL_GPIO_Init+0x2b8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c1c:	4a48      	ldr	r2, [pc, #288]	@ (8000d40 <HAL_GPIO_Init+0x2bc>)
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a40      	ldr	r2, [pc, #256]	@ (8000d44 <HAL_GPIO_Init+0x2c0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d013      	beq.n	8000c70 <HAL_GPIO_Init+0x1ec>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d48 <HAL_GPIO_Init+0x2c4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d00d      	beq.n	8000c6c <HAL_GPIO_Init+0x1e8>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a3e      	ldr	r2, [pc, #248]	@ (8000d4c <HAL_GPIO_Init+0x2c8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d007      	beq.n	8000c68 <HAL_GPIO_Init+0x1e4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d50 <HAL_GPIO_Init+0x2cc>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d101      	bne.n	8000c64 <HAL_GPIO_Init+0x1e0>
 8000c60:	2303      	movs	r3, #3
 8000c62:	e006      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c64:	2304      	movs	r3, #4
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c70:	2300      	movs	r3, #0
 8000c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c82:	492f      	ldr	r1, [pc, #188]	@ (8000d40 <HAL_GPIO_Init+0x2bc>)
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	492c      	ldr	r1, [pc, #176]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	608b      	str	r3, [r1, #8]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000caa:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4928      	ldr	r1, [pc, #160]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc4:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	4922      	ldr	r1, [pc, #136]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60cb      	str	r3, [r1, #12]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd2:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	491e      	ldr	r1, [pc, #120]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4918      	ldr	r1, [pc, #96]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	604b      	str	r3, [r1, #4]
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4914      	ldr	r1, [pc, #80]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d021      	beq.n	8000d58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	490e      	ldr	r1, [pc, #56]	@ (8000d54 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
 8000d20:	e021      	b.n	8000d66 <HAL_GPIO_Init+0x2e2>
 8000d22:	bf00      	nop
 8000d24:	10320000 	.word	0x10320000
 8000d28:	10310000 	.word	0x10310000
 8000d2c:	10220000 	.word	0x10220000
 8000d30:	10210000 	.word	0x10210000
 8000d34:	10120000 	.word	0x10120000
 8000d38:	10110000 	.word	0x10110000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40011400 	.word	0x40011400
 8000d54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_GPIO_Init+0x304>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4909      	ldr	r1, [pc, #36]	@ (8000d88 <HAL_GPIO_Init+0x304>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	3301      	adds	r3, #1
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	fa22 f303 	lsr.w	r3, r2, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f ae8e 	bne.w	8000a98 <HAL_GPIO_Init+0x14>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	372c      	adds	r7, #44	@ 0x2c
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9c:	787b      	ldrb	r3, [r7, #1]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000da8:	e003      	b.n	8000db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000daa:	887b      	ldrh	r3, [r7, #2]
 8000dac:	041a      	lsls	r2, r3, #16
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	611a      	str	r2, [r3, #16]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e272      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8087 	beq.w	8000eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	4b92      	ldr	r3, [pc, #584]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	4b8f      	ldr	r3, [pc, #572]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d112      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
 8000df4:	4b8c      	ldr	r3, [pc, #560]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b89      	ldr	r3, [pc, #548]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d06c      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d168      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e24c      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x76>
 8000e24:	4b80      	ldr	r3, [pc, #512]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a7f      	ldr	r2, [pc, #508]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e02e      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x98>
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b78      	ldr	r3, [pc, #480]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a77      	ldr	r2, [pc, #476]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01d      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0xbc>
 8000e5e:	4b72      	ldr	r3, [pc, #456]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a71      	ldr	r2, [pc, #452]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e78:	4b6b      	ldr	r3, [pc, #428]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b68      	ldr	r3, [pc, #416]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a67      	ldr	r2, [pc, #412]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fd06 	bl	80008a8 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fd02 	bl	80008a8 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	@ 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e200      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe4>
 8000ebe:	e014      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fcf2 	bl	80008a8 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fcee 	bl	80008a8 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	@ 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1ec      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b53      	ldr	r3, [pc, #332]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x10c>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f02:	4b49      	ldr	r3, [pc, #292]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d11c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
 8000f0e:	4b46      	ldr	r3, [pc, #280]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	4b43      	ldr	r3, [pc, #268]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1c0      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4939      	ldr	r1, [pc, #228]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	e03a      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	4b36      	ldr	r3, [pc, #216]	@ (800102c <HAL_RCC_OscConfig+0x270>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fca7 	bl	80008a8 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fca3 	bl	80008a8 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e1a1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4927      	ldr	r1, [pc, #156]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <HAL_RCC_OscConfig+0x270>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fc86 	bl	80008a8 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc82 	bl	80008a8 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e180      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03a      	beq.n	8001040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d019      	beq.n	8001006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fc66 	bl	80008a8 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fc62 	bl	80008a8 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e160      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 face 	bl	80015a0 <RCC_Delay>
 8001004:	e01c      	b.n	8001040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_RCC_OscConfig+0x274>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fc4c 	bl	80008a8 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	e00f      	b.n	8001034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fc48 	bl	80008a8 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d908      	bls.n	8001034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e146      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	42420000 	.word	0x42420000
 8001030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001034:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e9      	bne.n	8001014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a6 	beq.w	800119a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001052:	4b8b      	ldr	r3, [pc, #556]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b88      	ldr	r3, [pc, #544]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a87      	ldr	r2, [pc, #540]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b85      	ldr	r3, [pc, #532]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b82      	ldr	r3, [pc, #520]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d118      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b7f      	ldr	r3, [pc, #508]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7e      	ldr	r2, [pc, #504]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fc09 	bl	80008a8 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109a:	f7ff fc05 	bl	80008a8 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	@ 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e103      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b75      	ldr	r3, [pc, #468]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x312>
 80010c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
 80010cc:	e02d      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x334>
 80010d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a69      	ldr	r2, [pc, #420]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a66      	ldr	r2, [pc, #408]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	e01c      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x356>
 80010f8:	4b61      	ldr	r3, [pc, #388]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a60      	ldr	r2, [pc, #384]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	4b5e      	ldr	r3, [pc, #376]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a5d      	ldr	r2, [pc, #372]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e00b      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 8001112:	4b5b      	ldr	r3, [pc, #364]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a5a      	ldr	r2, [pc, #360]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b58      	ldr	r3, [pc, #352]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a57      	ldr	r2, [pc, #348]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d015      	beq.n	800115e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fbb9 	bl	80008a8 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fbb5 	bl	80008a8 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0b1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	4b4b      	ldr	r3, [pc, #300]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ee      	beq.n	800113a <HAL_RCC_OscConfig+0x37e>
 800115c:	e014      	b.n	8001188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fba3 	bl	80008a8 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fb9f 	bl	80008a8 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e09b      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	4b40      	ldr	r3, [pc, #256]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ee      	bne.n	8001166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d105      	bne.n	800119a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a3b      	ldr	r2, [pc, #236]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8087 	beq.w	80012b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d061      	beq.n	8001274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d146      	bne.n	8001246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fb73 	bl	80008a8 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fb6f 	bl	80008a8 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e06d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ec:	d108      	bne.n	8001200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4921      	ldr	r1, [pc, #132]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001210:	430b      	orrs	r3, r1
 8001212:	491b      	ldr	r1, [pc, #108]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fb43 	bl	80008a8 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fb3f 	bl	80008a8 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e03d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x46a>
 8001244:	e035      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fb2c 	bl	80008a8 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fb28 	bl	80008a8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e026      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x498>
 8001272:	e01e      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e019      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001280:	40021000 	.word	0x40021000
 8001284:	40007000 	.word	0x40007000
 8001288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_RCC_OscConfig+0x500>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0d0      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d910      	bls.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b67      	ldr	r3, [pc, #412]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 0207 	bic.w	r2, r3, #7
 80012ea:	4965      	ldr	r1, [pc, #404]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b8      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4b59      	ldr	r3, [pc, #356]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a58      	ldr	r2, [pc, #352]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001334:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800133e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001340:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	494d      	ldr	r1, [pc, #308]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d040      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e07f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e073      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06b      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139e:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4936      	ldr	r1, [pc, #216]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b0:	f7ff fa7a 	bl	80008a8 <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b8:	f7ff fa76 	bl	80008a8 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e053      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 020c 	and.w	r2, r3, #12
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1eb      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d210      	bcs.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4922      	ldr	r1, [pc, #136]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e032      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4916      	ldr	r1, [pc, #88]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	490e      	ldr	r1, [pc, #56]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144e:	f000 f821 	bl	8001494 <HAL_RCC_GetSysClockFreq>
 8001452:	4602      	mov	r2, r0
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	490a      	ldr	r1, [pc, #40]	@ (8001488 <HAL_RCC_ClockConfig+0x1c8>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	4a09      	ldr	r2, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x1cc>)
 8001468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_RCC_ClockConfig+0x1d0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f9d8 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000
 8001484:	40021000 	.word	0x40021000
 8001488:	08002e6c 	.word	0x08002e6c
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x94>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d002      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x30>
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d003      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x36>
 80014c2:	e027      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 80014c6:	613b      	str	r3, [r7, #16]
      break;
 80014c8:	e027      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	0c9b      	lsrs	r3, r3, #18
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x94>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0c5b      	lsrs	r3, r3, #17
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 80014f6:	fb03 f202 	mul.w	r2, r3, r2
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e004      	b.n	800150e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	613b      	str	r3, [r7, #16]
      break;
 8001512:	e002      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 8001516:	613b      	str	r3, [r7, #16]
      break;
 8001518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800151a:	693b      	ldr	r3, [r7, #16]
}
 800151c:	4618      	mov	r0, r3
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	007a1200 	.word	0x007a1200
 8001530:	08002e84 	.word	0x08002e84
 8001534:	08002e94 	.word	0x08002e94
 8001538:	003d0900 	.word	0x003d0900

0800153c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <HAL_RCC_GetHCLKFreq+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000000 	.word	0x20000000

08001550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001554:	f7ff fff2 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	4903      	ldr	r1, [pc, #12]	@ (8001574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	08002e7c 	.word	0x08002e7c

08001578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800157c:	f7ff ffde 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0adb      	lsrs	r3, r3, #11
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	4903      	ldr	r1, [pc, #12]	@ (800159c <HAL_RCC_GetPCLK2Freq+0x24>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	08002e7c 	.word	0x08002e7c

080015a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <RCC_Delay+0x34>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <RCC_Delay+0x38>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0a5b      	lsrs	r3, r3, #9
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015bc:	bf00      	nop
  }
  while (Delay --);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	60fa      	str	r2, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <RCC_Delay+0x1c>
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000000 	.word	0x20000000
 80015d8:	10624dd3 	.word	0x10624dd3

080015dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e076      	b.n	80016dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d108      	bne.n	8001608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80015fe:	d009      	beq.n	8001614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
 8001606:	e005      	b.n	8001614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7fe ff62 	bl	80004f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800164a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001698:	ea42 0103 	orr.w	r1, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	0c1a      	lsrs	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f002 0204 	and.w	r2, r2, #4
 80016ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_SPI_Transmit+0x22>
 8001702:	2302      	movs	r3, #2
 8001704:	e12d      	b.n	8001962 <HAL_SPI_Transmit+0x27e>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800170e:	f7ff f8cb 	bl	80008a8 <HAL_GetTick>
 8001712:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d002      	beq.n	800172a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001724:	2302      	movs	r3, #2
 8001726:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001728:	e116      	b.n	8001958 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <HAL_SPI_Transmit+0x52>
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	77fb      	strb	r3, [r7, #31]
    goto error;
 800173a:	e10d      	b.n	8001958 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2203      	movs	r2, #3
 8001740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	88fa      	ldrh	r2, [r7, #6]
 8001754:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	88fa      	ldrh	r2, [r7, #6]
 800175a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001782:	d10f      	bne.n	80017a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001792:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ae:	2b40      	cmp	r3, #64	@ 0x40
 80017b0:	d007      	beq.n	80017c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017ca:	d14f      	bne.n	800186c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_SPI_Transmit+0xf6>
 80017d4:	8afb      	ldrh	r3, [r7, #22]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d142      	bne.n	8001860 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	1c9a      	adds	r2, r3, #2
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017fe:	e02f      	b.n	8001860 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d112      	bne.n	8001834 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	1c9a      	adds	r2, r3, #2
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001832:	e015      	b.n	8001860 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001834:	f7ff f838 	bl	80008a8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d803      	bhi.n	800184c <HAL_SPI_Transmit+0x168>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184a:	d102      	bne.n	8001852 <HAL_SPI_Transmit+0x16e>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800185e:	e07b      	b.n	8001958 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ca      	bne.n	8001800 <HAL_SPI_Transmit+0x11c>
 800186a:	e050      	b.n	800190e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_SPI_Transmit+0x196>
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d144      	bne.n	8001904 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	330c      	adds	r3, #12
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018a0:	e030      	b.n	8001904 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d113      	bne.n	80018d8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	330c      	adds	r3, #12
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80018d6:	e015      	b.n	8001904 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018d8:	f7fe ffe6 	bl	80008a8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d803      	bhi.n	80018f0 <HAL_SPI_Transmit+0x20c>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d102      	bne.n	80018f6 <HAL_SPI_Transmit+0x212>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001902:	e029      	b.n	8001958 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1c9      	bne.n	80018a2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fbcc 	bl	80020b0 <SPI_EndRxTxTransaction>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]
 800194e:	e003      	b.n	8001958 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001960:	7ffb      	ldrb	r3, [r7, #31]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b088      	sub	sp, #32
 800196e:	af02      	add	r7, sp, #8
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4613      	mov	r3, r2
 8001978:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d002      	beq.n	8001990 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800198a:	2302      	movs	r3, #2
 800198c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800198e:	e0fb      	b.n	8001b88 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001998:	d112      	bne.n	80019c0 <HAL_SPI_Receive+0x56>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10e      	bne.n	80019c0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2204      	movs	r2, #4
 80019a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f8ef 	bl	8001b9a <HAL_SPI_TransmitReceive>
 80019bc:	4603      	mov	r3, r0
 80019be:	e0e8      	b.n	8001b92 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_SPI_Receive+0x64>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e0e1      	b.n	8001b92 <HAL_SPI_Receive+0x228>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019d6:	f7fe ff67 	bl	80008a8 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_SPI_Receive+0x7e>
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019ec:	e0cc      	b.n	8001b88 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2204      	movs	r2, #4
 80019f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	88fa      	ldrh	r2, [r7, #6]
 8001a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a34:	d10f      	bne.n	8001a56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a60:	2b40      	cmp	r3, #64	@ 0x40
 8001a62:	d007      	beq.n	8001a74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d16a      	bne.n	8001b52 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a7c:	e032      	b.n	8001ae4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d115      	bne.n	8001ab8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f103 020c 	add.w	r2, r3, #12
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ab6:	e015      	b.n	8001ae4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ab8:	f7fe fef6 	bl	80008a8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d803      	bhi.n	8001ad0 <HAL_SPI_Receive+0x166>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ace:	d102      	bne.n	8001ad6 <HAL_SPI_Receive+0x16c>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001ae2:	e051      	b.n	8001b88 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1c7      	bne.n	8001a7e <HAL_SPI_Receive+0x114>
 8001aee:	e035      	b.n	8001b5c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d113      	bne.n	8001b26 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b10:	1c9a      	adds	r2, r3, #2
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b24:	e015      	b.n	8001b52 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b26:	f7fe febf 	bl	80008a8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d803      	bhi.n	8001b3e <HAL_SPI_Receive+0x1d4>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d102      	bne.n	8001b44 <HAL_SPI_Receive+0x1da>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d106      	bne.n	8001b52 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001b50:	e01a      	b.n	8001b88 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1c9      	bne.n	8001af0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fa53 	bl	800200c <SPI_EndRxTransaction>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
 8001b7e:	e003      	b.n	8001b88 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b08c      	sub	sp, #48	@ 0x30
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_SPI_TransmitReceive+0x26>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e198      	b.n	8001ef2 <HAL_SPI_TransmitReceive+0x358>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc8:	f7fe fe6e 	bl	80008a8 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001be2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d00f      	beq.n	8001c0a <HAL_SPI_TransmitReceive+0x70>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bf0:	d107      	bne.n	8001c02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_SPI_TransmitReceive+0x68>
 8001bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d003      	beq.n	8001c0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
 8001c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001c08:	e16d      	b.n	8001ee6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_SPI_TransmitReceive+0x82>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_TransmitReceive+0x82>
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d103      	bne.n	8001c24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001c22:	e160      	b.n	8001ee6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d003      	beq.n	8001c38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2205      	movs	r2, #5
 8001c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c78:	2b40      	cmp	r3, #64	@ 0x40
 8001c7a:	d007      	beq.n	8001c8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c94:	d17c      	bne.n	8001d90 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_SPI_TransmitReceive+0x10a>
 8001c9e:	8b7b      	ldrh	r3, [r7, #26]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d16a      	bne.n	8001d7a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	1c9a      	adds	r2, r3, #2
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cc8:	e057      	b.n	8001d7a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d11b      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x176>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <HAL_SPI_TransmitReceive+0x176>
 8001ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d113      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d119      	bne.n	8001d52 <HAL_SPI_TransmitReceive+0x1b8>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d014      	beq.n	8001d52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d32:	b292      	uxth	r2, r2
 8001d34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3a:	1c9a      	adds	r2, r3, #2
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d52:	f7fe fda9 	bl	80008a8 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d80b      	bhi.n	8001d7a <HAL_SPI_TransmitReceive+0x1e0>
 8001d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d007      	beq.n	8001d7a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001d78:	e0b5      	b.n	8001ee6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1a2      	bne.n	8001cca <HAL_SPI_TransmitReceive+0x130>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d19d      	bne.n	8001cca <HAL_SPI_TransmitReceive+0x130>
 8001d8e:	e080      	b.n	8001e92 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_SPI_TransmitReceive+0x204>
 8001d98:	8b7b      	ldrh	r3, [r7, #26]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d16f      	bne.n	8001e7e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	330c      	adds	r3, #12
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dc4:	e05b      	b.n	8001e7e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d11c      	bne.n	8001e0e <HAL_SPI_TransmitReceive+0x274>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d017      	beq.n	8001e0e <HAL_SPI_TransmitReceive+0x274>
 8001dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d114      	bne.n	8001e0e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d119      	bne.n	8001e50 <HAL_SPI_TransmitReceive+0x2b6>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d014      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e50:	f7fe fd2a 	bl	80008a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d803      	bhi.n	8001e68 <HAL_SPI_TransmitReceive+0x2ce>
 8001e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e66:	d102      	bne.n	8001e6e <HAL_SPI_TransmitReceive+0x2d4>
 8001e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d107      	bne.n	8001e7e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001e7c:	e033      	b.n	8001ee6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d19e      	bne.n	8001dc6 <HAL_SPI_TransmitReceive+0x22c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d199      	bne.n	8001dc6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f90a 	bl	80020b0 <SPI_EndRxTxTransaction>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8001eae:	e01a      	b.n	8001ee6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001edc:	e003      	b.n	8001ee6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001eee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3730      	adds	r7, #48	@ 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f0c:	f7fe fccc 	bl	80008a8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f1c:	f7fe fcc4 	bl	80008a8 <HAL_GetTick>
 8001f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f22:	4b39      	ldr	r3, [pc, #228]	@ (8002008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	015b      	lsls	r3, r3, #5
 8001f28:	0d1b      	lsrs	r3, r3, #20
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f32:	e054      	b.n	8001fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3a:	d050      	beq.n	8001fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f3c:	f7fe fcb4 	bl	80008a8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d902      	bls.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d13d      	bne.n	8001fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f6a:	d111      	bne.n	8001f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f74:	d004      	beq.n	8001f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7e:	d107      	bne.n	8001f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f98:	d10f      	bne.n	8001fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e017      	b.n	8001ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d19b      	bne.n	8001f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000

0800200c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002020:	d111      	bne.n	8002046 <SPI_EndRxTransaction+0x3a>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800202a:	d004      	beq.n	8002036 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002034:	d107      	bne.n	8002046 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002044:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800204e:	d117      	bne.n	8002080 <SPI_EndRxTransaction+0x74>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002058:	d112      	bne.n	8002080 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2200      	movs	r2, #0
 8002062:	2101      	movs	r1, #1
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff ff49 	bl	8001efc <SPI_WaitFlagStateUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01a      	beq.n	80020a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e013      	b.n	80020a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7ff ff36 	bl	8001efc <SPI_WaitFlagStateUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f043 0220 	orr.w	r2, r3, #32
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e000      	b.n	80020a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	2180      	movs	r1, #128	@ 0x80
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f7ff ff18 	bl	8001efc <SPI_WaitFlagStateUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e000      	b.n	80020e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e042      	b.n	8002184 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fafe 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	@ 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800212e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f91d 	bl	8002370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	@ 0x28
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d16d      	bne.n	8002288 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_UART_Transmit+0x2c>
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e066      	b.n	800228a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2221      	movs	r2, #33	@ 0x21
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ca:	f7fe fb6d 	bl	80008a8 <HAL_GetTick>
 80021ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	88fa      	ldrh	r2, [r7, #6]
 80021d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	88fa      	ldrh	r2, [r7, #6]
 80021da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e4:	d108      	bne.n	80021f8 <HAL_UART_Transmit+0x6c>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e003      	b.n	8002200 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002200:	e02a      	b.n	8002258 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	@ 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f840 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e036      	b.n	800228a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3302      	adds	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e007      	b.n	800224a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1cf      	bne.n	8002202 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	2140      	movs	r1, #64	@ 0x40
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f810 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e006      	b.n	800228a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b090      	sub	sp, #64	@ 0x40
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a2:	e050      	b.n	8002346 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d04c      	beq.n	8002346 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80022b2:	f7fe faf9 	bl	80008a8 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022be:	429a      	cmp	r2, r3
 80022c0:	d241      	bcs.n	8002346 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80022d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80022f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e5      	bne.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3314      	adds	r3, #20
 80022fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	e853 3f00 	ldrex	r3, [r3]
 8002304:	613b      	str	r3, [r7, #16]
   return(result);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3314      	adds	r3, #20
 8002314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002316:	623a      	str	r2, [r7, #32]
 8002318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	69f9      	ldr	r1, [r7, #28]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	61bb      	str	r3, [r7, #24]
   return(result);
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e5      	bne.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e00f      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4013      	ands	r3, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	429a      	cmp	r2, r3
 8002362:	d09f      	beq.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3740      	adds	r7, #64	@ 0x40
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023aa:	f023 030c 	bic.w	r3, r3, #12
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002484 <UART_SetConfig+0x114>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d103      	bne.n	80023e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023d8:	f7ff f8ce 	bl	8001578 <HAL_RCC_GetPCLK2Freq>
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	e002      	b.n	80023e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023e0:	f7ff f8b6 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
 80023e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009a      	lsls	r2, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	4a22      	ldr	r2, [pc, #136]	@ (8002488 <UART_SetConfig+0x118>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	0119      	lsls	r1, r3, #4
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009a      	lsls	r2, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fbb2 f2f3 	udiv	r2, r2, r3
 800241c:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <UART_SetConfig+0x118>)
 800241e:	fba3 0302 	umull	r0, r3, r3, r2
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2064      	movs	r0, #100	@ 0x64
 8002426:	fb00 f303 	mul.w	r3, r0, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	3332      	adds	r3, #50	@ 0x32
 8002430:	4a15      	ldr	r2, [pc, #84]	@ (8002488 <UART_SetConfig+0x118>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800243c:	4419      	add	r1, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009a      	lsls	r2, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fbb2 f2f3 	udiv	r2, r2, r3
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <UART_SetConfig+0x118>)
 8002456:	fba3 0302 	umull	r0, r3, r3, r2
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2064      	movs	r0, #100	@ 0x64
 800245e:	fb00 f303 	mul.w	r3, r0, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	3332      	adds	r3, #50	@ 0x32
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <UART_SetConfig+0x118>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	f003 020f 	and.w	r2, r3, #15
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	440a      	add	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40013800 	.word	0x40013800
 8002488:	51eb851f 	.word	0x51eb851f

0800248c <siprintf>:
 800248c:	b40e      	push	{r1, r2, r3}
 800248e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002492:	b500      	push	{lr}
 8002494:	b09c      	sub	sp, #112	@ 0x70
 8002496:	ab1d      	add	r3, sp, #116	@ 0x74
 8002498:	9002      	str	r0, [sp, #8]
 800249a:	9006      	str	r0, [sp, #24]
 800249c:	9107      	str	r1, [sp, #28]
 800249e:	9104      	str	r1, [sp, #16]
 80024a0:	4808      	ldr	r0, [pc, #32]	@ (80024c4 <siprintf+0x38>)
 80024a2:	4909      	ldr	r1, [pc, #36]	@ (80024c8 <siprintf+0x3c>)
 80024a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80024a8:	9105      	str	r1, [sp, #20]
 80024aa:	6800      	ldr	r0, [r0, #0]
 80024ac:	a902      	add	r1, sp, #8
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	f000 f992 	bl	80027d8 <_svfiprintf_r>
 80024b4:	2200      	movs	r2, #0
 80024b6:	9b02      	ldr	r3, [sp, #8]
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	b01c      	add	sp, #112	@ 0x70
 80024bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80024c0:	b003      	add	sp, #12
 80024c2:	4770      	bx	lr
 80024c4:	2000000c 	.word	0x2000000c
 80024c8:	ffff0208 	.word	0xffff0208

080024cc <memset>:
 80024cc:	4603      	mov	r3, r0
 80024ce:	4402      	add	r2, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	f803 1b01 	strb.w	r1, [r3], #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <__errno>:
 80024dc:	4b01      	ldr	r3, [pc, #4]	@ (80024e4 <__errno+0x8>)
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	2000000c 	.word	0x2000000c

080024e8 <__libc_init_array>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	2600      	movs	r6, #0
 80024ec:	4d0c      	ldr	r5, [pc, #48]	@ (8002520 <__libc_init_array+0x38>)
 80024ee:	4c0d      	ldr	r4, [pc, #52]	@ (8002524 <__libc_init_array+0x3c>)
 80024f0:	1b64      	subs	r4, r4, r5
 80024f2:	10a4      	asrs	r4, r4, #2
 80024f4:	42a6      	cmp	r6, r4
 80024f6:	d109      	bne.n	800250c <__libc_init_array+0x24>
 80024f8:	f000 fc78 	bl	8002dec <_init>
 80024fc:	2600      	movs	r6, #0
 80024fe:	4d0a      	ldr	r5, [pc, #40]	@ (8002528 <__libc_init_array+0x40>)
 8002500:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <__libc_init_array+0x44>)
 8002502:	1b64      	subs	r4, r4, r5
 8002504:	10a4      	asrs	r4, r4, #2
 8002506:	42a6      	cmp	r6, r4
 8002508:	d105      	bne.n	8002516 <__libc_init_array+0x2e>
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002510:	4798      	blx	r3
 8002512:	3601      	adds	r6, #1
 8002514:	e7ee      	b.n	80024f4 <__libc_init_array+0xc>
 8002516:	f855 3b04 	ldr.w	r3, [r5], #4
 800251a:	4798      	blx	r3
 800251c:	3601      	adds	r6, #1
 800251e:	e7f2      	b.n	8002506 <__libc_init_array+0x1e>
 8002520:	08002ecc 	.word	0x08002ecc
 8002524:	08002ecc 	.word	0x08002ecc
 8002528:	08002ecc 	.word	0x08002ecc
 800252c:	08002ed0 	.word	0x08002ed0

08002530 <__retarget_lock_acquire_recursive>:
 8002530:	4770      	bx	lr

08002532 <__retarget_lock_release_recursive>:
 8002532:	4770      	bx	lr

08002534 <_free_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4605      	mov	r5, r0
 8002538:	2900      	cmp	r1, #0
 800253a:	d040      	beq.n	80025be <_free_r+0x8a>
 800253c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002540:	1f0c      	subs	r4, r1, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	bfb8      	it	lt
 8002546:	18e4      	addlt	r4, r4, r3
 8002548:	f000 f8de 	bl	8002708 <__malloc_lock>
 800254c:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <_free_r+0x8c>)
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	b933      	cbnz	r3, 8002560 <_free_r+0x2c>
 8002552:	6063      	str	r3, [r4, #4]
 8002554:	6014      	str	r4, [r2, #0]
 8002556:	4628      	mov	r0, r5
 8002558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800255c:	f000 b8da 	b.w	8002714 <__malloc_unlock>
 8002560:	42a3      	cmp	r3, r4
 8002562:	d908      	bls.n	8002576 <_free_r+0x42>
 8002564:	6820      	ldr	r0, [r4, #0]
 8002566:	1821      	adds	r1, r4, r0
 8002568:	428b      	cmp	r3, r1
 800256a:	bf01      	itttt	eq
 800256c:	6819      	ldreq	r1, [r3, #0]
 800256e:	685b      	ldreq	r3, [r3, #4]
 8002570:	1809      	addeq	r1, r1, r0
 8002572:	6021      	streq	r1, [r4, #0]
 8002574:	e7ed      	b.n	8002552 <_free_r+0x1e>
 8002576:	461a      	mov	r2, r3
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	b10b      	cbz	r3, 8002580 <_free_r+0x4c>
 800257c:	42a3      	cmp	r3, r4
 800257e:	d9fa      	bls.n	8002576 <_free_r+0x42>
 8002580:	6811      	ldr	r1, [r2, #0]
 8002582:	1850      	adds	r0, r2, r1
 8002584:	42a0      	cmp	r0, r4
 8002586:	d10b      	bne.n	80025a0 <_free_r+0x6c>
 8002588:	6820      	ldr	r0, [r4, #0]
 800258a:	4401      	add	r1, r0
 800258c:	1850      	adds	r0, r2, r1
 800258e:	4283      	cmp	r3, r0
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	d1e0      	bne.n	8002556 <_free_r+0x22>
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4408      	add	r0, r1
 800259a:	6010      	str	r0, [r2, #0]
 800259c:	6053      	str	r3, [r2, #4]
 800259e:	e7da      	b.n	8002556 <_free_r+0x22>
 80025a0:	d902      	bls.n	80025a8 <_free_r+0x74>
 80025a2:	230c      	movs	r3, #12
 80025a4:	602b      	str	r3, [r5, #0]
 80025a6:	e7d6      	b.n	8002556 <_free_r+0x22>
 80025a8:	6820      	ldr	r0, [r4, #0]
 80025aa:	1821      	adds	r1, r4, r0
 80025ac:	428b      	cmp	r3, r1
 80025ae:	bf01      	itttt	eq
 80025b0:	6819      	ldreq	r1, [r3, #0]
 80025b2:	685b      	ldreq	r3, [r3, #4]
 80025b4:	1809      	addeq	r1, r1, r0
 80025b6:	6021      	streq	r1, [r4, #0]
 80025b8:	6063      	str	r3, [r4, #4]
 80025ba:	6054      	str	r4, [r2, #4]
 80025bc:	e7cb      	b.n	8002556 <_free_r+0x22>
 80025be:	bd38      	pop	{r3, r4, r5, pc}
 80025c0:	20000264 	.word	0x20000264

080025c4 <sbrk_aligned>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	4e0f      	ldr	r6, [pc, #60]	@ (8002604 <sbrk_aligned+0x40>)
 80025c8:	460c      	mov	r4, r1
 80025ca:	6831      	ldr	r1, [r6, #0]
 80025cc:	4605      	mov	r5, r0
 80025ce:	b911      	cbnz	r1, 80025d6 <sbrk_aligned+0x12>
 80025d0:	f000 fbaa 	bl	8002d28 <_sbrk_r>
 80025d4:	6030      	str	r0, [r6, #0]
 80025d6:	4621      	mov	r1, r4
 80025d8:	4628      	mov	r0, r5
 80025da:	f000 fba5 	bl	8002d28 <_sbrk_r>
 80025de:	1c43      	adds	r3, r0, #1
 80025e0:	d103      	bne.n	80025ea <sbrk_aligned+0x26>
 80025e2:	f04f 34ff 	mov.w	r4, #4294967295
 80025e6:	4620      	mov	r0, r4
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
 80025ea:	1cc4      	adds	r4, r0, #3
 80025ec:	f024 0403 	bic.w	r4, r4, #3
 80025f0:	42a0      	cmp	r0, r4
 80025f2:	d0f8      	beq.n	80025e6 <sbrk_aligned+0x22>
 80025f4:	1a21      	subs	r1, r4, r0
 80025f6:	4628      	mov	r0, r5
 80025f8:	f000 fb96 	bl	8002d28 <_sbrk_r>
 80025fc:	3001      	adds	r0, #1
 80025fe:	d1f2      	bne.n	80025e6 <sbrk_aligned+0x22>
 8002600:	e7ef      	b.n	80025e2 <sbrk_aligned+0x1e>
 8002602:	bf00      	nop
 8002604:	20000260 	.word	0x20000260

08002608 <_malloc_r>:
 8002608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800260c:	1ccd      	adds	r5, r1, #3
 800260e:	f025 0503 	bic.w	r5, r5, #3
 8002612:	3508      	adds	r5, #8
 8002614:	2d0c      	cmp	r5, #12
 8002616:	bf38      	it	cc
 8002618:	250c      	movcc	r5, #12
 800261a:	2d00      	cmp	r5, #0
 800261c:	4606      	mov	r6, r0
 800261e:	db01      	blt.n	8002624 <_malloc_r+0x1c>
 8002620:	42a9      	cmp	r1, r5
 8002622:	d904      	bls.n	800262e <_malloc_r+0x26>
 8002624:	230c      	movs	r3, #12
 8002626:	6033      	str	r3, [r6, #0]
 8002628:	2000      	movs	r0, #0
 800262a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800262e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002704 <_malloc_r+0xfc>
 8002632:	f000 f869 	bl	8002708 <__malloc_lock>
 8002636:	f8d8 3000 	ldr.w	r3, [r8]
 800263a:	461c      	mov	r4, r3
 800263c:	bb44      	cbnz	r4, 8002690 <_malloc_r+0x88>
 800263e:	4629      	mov	r1, r5
 8002640:	4630      	mov	r0, r6
 8002642:	f7ff ffbf 	bl	80025c4 <sbrk_aligned>
 8002646:	1c43      	adds	r3, r0, #1
 8002648:	4604      	mov	r4, r0
 800264a:	d158      	bne.n	80026fe <_malloc_r+0xf6>
 800264c:	f8d8 4000 	ldr.w	r4, [r8]
 8002650:	4627      	mov	r7, r4
 8002652:	2f00      	cmp	r7, #0
 8002654:	d143      	bne.n	80026de <_malloc_r+0xd6>
 8002656:	2c00      	cmp	r4, #0
 8002658:	d04b      	beq.n	80026f2 <_malloc_r+0xea>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	4639      	mov	r1, r7
 800265e:	4630      	mov	r0, r6
 8002660:	eb04 0903 	add.w	r9, r4, r3
 8002664:	f000 fb60 	bl	8002d28 <_sbrk_r>
 8002668:	4581      	cmp	r9, r0
 800266a:	d142      	bne.n	80026f2 <_malloc_r+0xea>
 800266c:	6821      	ldr	r1, [r4, #0]
 800266e:	4630      	mov	r0, r6
 8002670:	1a6d      	subs	r5, r5, r1
 8002672:	4629      	mov	r1, r5
 8002674:	f7ff ffa6 	bl	80025c4 <sbrk_aligned>
 8002678:	3001      	adds	r0, #1
 800267a:	d03a      	beq.n	80026f2 <_malloc_r+0xea>
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	442b      	add	r3, r5
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	f8d8 3000 	ldr.w	r3, [r8]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	bb62      	cbnz	r2, 80026e4 <_malloc_r+0xdc>
 800268a:	f8c8 7000 	str.w	r7, [r8]
 800268e:	e00f      	b.n	80026b0 <_malloc_r+0xa8>
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	1b52      	subs	r2, r2, r5
 8002694:	d420      	bmi.n	80026d8 <_malloc_r+0xd0>
 8002696:	2a0b      	cmp	r2, #11
 8002698:	d917      	bls.n	80026ca <_malloc_r+0xc2>
 800269a:	1961      	adds	r1, r4, r5
 800269c:	42a3      	cmp	r3, r4
 800269e:	6025      	str	r5, [r4, #0]
 80026a0:	bf18      	it	ne
 80026a2:	6059      	strne	r1, [r3, #4]
 80026a4:	6863      	ldr	r3, [r4, #4]
 80026a6:	bf08      	it	eq
 80026a8:	f8c8 1000 	streq.w	r1, [r8]
 80026ac:	5162      	str	r2, [r4, r5]
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	4630      	mov	r0, r6
 80026b2:	f000 f82f 	bl	8002714 <__malloc_unlock>
 80026b6:	f104 000b 	add.w	r0, r4, #11
 80026ba:	1d23      	adds	r3, r4, #4
 80026bc:	f020 0007 	bic.w	r0, r0, #7
 80026c0:	1ac2      	subs	r2, r0, r3
 80026c2:	bf1c      	itt	ne
 80026c4:	1a1b      	subne	r3, r3, r0
 80026c6:	50a3      	strne	r3, [r4, r2]
 80026c8:	e7af      	b.n	800262a <_malloc_r+0x22>
 80026ca:	6862      	ldr	r2, [r4, #4]
 80026cc:	42a3      	cmp	r3, r4
 80026ce:	bf0c      	ite	eq
 80026d0:	f8c8 2000 	streq.w	r2, [r8]
 80026d4:	605a      	strne	r2, [r3, #4]
 80026d6:	e7eb      	b.n	80026b0 <_malloc_r+0xa8>
 80026d8:	4623      	mov	r3, r4
 80026da:	6864      	ldr	r4, [r4, #4]
 80026dc:	e7ae      	b.n	800263c <_malloc_r+0x34>
 80026de:	463c      	mov	r4, r7
 80026e0:	687f      	ldr	r7, [r7, #4]
 80026e2:	e7b6      	b.n	8002652 <_malloc_r+0x4a>
 80026e4:	461a      	mov	r2, r3
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	42a3      	cmp	r3, r4
 80026ea:	d1fb      	bne.n	80026e4 <_malloc_r+0xdc>
 80026ec:	2300      	movs	r3, #0
 80026ee:	6053      	str	r3, [r2, #4]
 80026f0:	e7de      	b.n	80026b0 <_malloc_r+0xa8>
 80026f2:	230c      	movs	r3, #12
 80026f4:	4630      	mov	r0, r6
 80026f6:	6033      	str	r3, [r6, #0]
 80026f8:	f000 f80c 	bl	8002714 <__malloc_unlock>
 80026fc:	e794      	b.n	8002628 <_malloc_r+0x20>
 80026fe:	6005      	str	r5, [r0, #0]
 8002700:	e7d6      	b.n	80026b0 <_malloc_r+0xa8>
 8002702:	bf00      	nop
 8002704:	20000264 	.word	0x20000264

08002708 <__malloc_lock>:
 8002708:	4801      	ldr	r0, [pc, #4]	@ (8002710 <__malloc_lock+0x8>)
 800270a:	f7ff bf11 	b.w	8002530 <__retarget_lock_acquire_recursive>
 800270e:	bf00      	nop
 8002710:	2000025c 	.word	0x2000025c

08002714 <__malloc_unlock>:
 8002714:	4801      	ldr	r0, [pc, #4]	@ (800271c <__malloc_unlock+0x8>)
 8002716:	f7ff bf0c 	b.w	8002532 <__retarget_lock_release_recursive>
 800271a:	bf00      	nop
 800271c:	2000025c 	.word	0x2000025c

08002720 <__ssputs_r>:
 8002720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002724:	461f      	mov	r7, r3
 8002726:	688e      	ldr	r6, [r1, #8]
 8002728:	4682      	mov	sl, r0
 800272a:	42be      	cmp	r6, r7
 800272c:	460c      	mov	r4, r1
 800272e:	4690      	mov	r8, r2
 8002730:	680b      	ldr	r3, [r1, #0]
 8002732:	d82d      	bhi.n	8002790 <__ssputs_r+0x70>
 8002734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800273c:	d026      	beq.n	800278c <__ssputs_r+0x6c>
 800273e:	6965      	ldr	r5, [r4, #20]
 8002740:	6909      	ldr	r1, [r1, #16]
 8002742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002746:	eba3 0901 	sub.w	r9, r3, r1
 800274a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800274e:	1c7b      	adds	r3, r7, #1
 8002750:	444b      	add	r3, r9
 8002752:	106d      	asrs	r5, r5, #1
 8002754:	429d      	cmp	r5, r3
 8002756:	bf38      	it	cc
 8002758:	461d      	movcc	r5, r3
 800275a:	0553      	lsls	r3, r2, #21
 800275c:	d527      	bpl.n	80027ae <__ssputs_r+0x8e>
 800275e:	4629      	mov	r1, r5
 8002760:	f7ff ff52 	bl	8002608 <_malloc_r>
 8002764:	4606      	mov	r6, r0
 8002766:	b360      	cbz	r0, 80027c2 <__ssputs_r+0xa2>
 8002768:	464a      	mov	r2, r9
 800276a:	6921      	ldr	r1, [r4, #16]
 800276c:	f000 fafa 	bl	8002d64 <memcpy>
 8002770:	89a3      	ldrh	r3, [r4, #12]
 8002772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800277a:	81a3      	strh	r3, [r4, #12]
 800277c:	6126      	str	r6, [r4, #16]
 800277e:	444e      	add	r6, r9
 8002780:	6026      	str	r6, [r4, #0]
 8002782:	463e      	mov	r6, r7
 8002784:	6165      	str	r5, [r4, #20]
 8002786:	eba5 0509 	sub.w	r5, r5, r9
 800278a:	60a5      	str	r5, [r4, #8]
 800278c:	42be      	cmp	r6, r7
 800278e:	d900      	bls.n	8002792 <__ssputs_r+0x72>
 8002790:	463e      	mov	r6, r7
 8002792:	4632      	mov	r2, r6
 8002794:	4641      	mov	r1, r8
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	f000 faac 	bl	8002cf4 <memmove>
 800279c:	2000      	movs	r0, #0
 800279e:	68a3      	ldr	r3, [r4, #8]
 80027a0:	1b9b      	subs	r3, r3, r6
 80027a2:	60a3      	str	r3, [r4, #8]
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	4433      	add	r3, r6
 80027a8:	6023      	str	r3, [r4, #0]
 80027aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ae:	462a      	mov	r2, r5
 80027b0:	f000 fae6 	bl	8002d80 <_realloc_r>
 80027b4:	4606      	mov	r6, r0
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d1e0      	bne.n	800277c <__ssputs_r+0x5c>
 80027ba:	4650      	mov	r0, sl
 80027bc:	6921      	ldr	r1, [r4, #16]
 80027be:	f7ff feb9 	bl	8002534 <_free_r>
 80027c2:	230c      	movs	r3, #12
 80027c4:	f8ca 3000 	str.w	r3, [sl]
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	f04f 30ff 	mov.w	r0, #4294967295
 80027ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027d2:	81a3      	strh	r3, [r4, #12]
 80027d4:	e7e9      	b.n	80027aa <__ssputs_r+0x8a>
	...

080027d8 <_svfiprintf_r>:
 80027d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027dc:	4698      	mov	r8, r3
 80027de:	898b      	ldrh	r3, [r1, #12]
 80027e0:	4607      	mov	r7, r0
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	460d      	mov	r5, r1
 80027e6:	4614      	mov	r4, r2
 80027e8:	b09d      	sub	sp, #116	@ 0x74
 80027ea:	d510      	bpl.n	800280e <_svfiprintf_r+0x36>
 80027ec:	690b      	ldr	r3, [r1, #16]
 80027ee:	b973      	cbnz	r3, 800280e <_svfiprintf_r+0x36>
 80027f0:	2140      	movs	r1, #64	@ 0x40
 80027f2:	f7ff ff09 	bl	8002608 <_malloc_r>
 80027f6:	6028      	str	r0, [r5, #0]
 80027f8:	6128      	str	r0, [r5, #16]
 80027fa:	b930      	cbnz	r0, 800280a <_svfiprintf_r+0x32>
 80027fc:	230c      	movs	r3, #12
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	b01d      	add	sp, #116	@ 0x74
 8002806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800280a:	2340      	movs	r3, #64	@ 0x40
 800280c:	616b      	str	r3, [r5, #20]
 800280e:	2300      	movs	r3, #0
 8002810:	9309      	str	r3, [sp, #36]	@ 0x24
 8002812:	2320      	movs	r3, #32
 8002814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002818:	2330      	movs	r3, #48	@ 0x30
 800281a:	f04f 0901 	mov.w	r9, #1
 800281e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002822:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80029bc <_svfiprintf_r+0x1e4>
 8002826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800282a:	4623      	mov	r3, r4
 800282c:	469a      	mov	sl, r3
 800282e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002832:	b10a      	cbz	r2, 8002838 <_svfiprintf_r+0x60>
 8002834:	2a25      	cmp	r2, #37	@ 0x25
 8002836:	d1f9      	bne.n	800282c <_svfiprintf_r+0x54>
 8002838:	ebba 0b04 	subs.w	fp, sl, r4
 800283c:	d00b      	beq.n	8002856 <_svfiprintf_r+0x7e>
 800283e:	465b      	mov	r3, fp
 8002840:	4622      	mov	r2, r4
 8002842:	4629      	mov	r1, r5
 8002844:	4638      	mov	r0, r7
 8002846:	f7ff ff6b 	bl	8002720 <__ssputs_r>
 800284a:	3001      	adds	r0, #1
 800284c:	f000 80a7 	beq.w	800299e <_svfiprintf_r+0x1c6>
 8002850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002852:	445a      	add	r2, fp
 8002854:	9209      	str	r2, [sp, #36]	@ 0x24
 8002856:	f89a 3000 	ldrb.w	r3, [sl]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 809f 	beq.w	800299e <_svfiprintf_r+0x1c6>
 8002860:	2300      	movs	r3, #0
 8002862:	f04f 32ff 	mov.w	r2, #4294967295
 8002866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800286a:	f10a 0a01 	add.w	sl, sl, #1
 800286e:	9304      	str	r3, [sp, #16]
 8002870:	9307      	str	r3, [sp, #28]
 8002872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002876:	931a      	str	r3, [sp, #104]	@ 0x68
 8002878:	4654      	mov	r4, sl
 800287a:	2205      	movs	r2, #5
 800287c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002880:	484e      	ldr	r0, [pc, #312]	@ (80029bc <_svfiprintf_r+0x1e4>)
 8002882:	f000 fa61 	bl	8002d48 <memchr>
 8002886:	9a04      	ldr	r2, [sp, #16]
 8002888:	b9d8      	cbnz	r0, 80028c2 <_svfiprintf_r+0xea>
 800288a:	06d0      	lsls	r0, r2, #27
 800288c:	bf44      	itt	mi
 800288e:	2320      	movmi	r3, #32
 8002890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002894:	0711      	lsls	r1, r2, #28
 8002896:	bf44      	itt	mi
 8002898:	232b      	movmi	r3, #43	@ 0x2b
 800289a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800289e:	f89a 3000 	ldrb.w	r3, [sl]
 80028a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80028a4:	d015      	beq.n	80028d2 <_svfiprintf_r+0xfa>
 80028a6:	4654      	mov	r4, sl
 80028a8:	2000      	movs	r0, #0
 80028aa:	f04f 0c0a 	mov.w	ip, #10
 80028ae:	9a07      	ldr	r2, [sp, #28]
 80028b0:	4621      	mov	r1, r4
 80028b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028b6:	3b30      	subs	r3, #48	@ 0x30
 80028b8:	2b09      	cmp	r3, #9
 80028ba:	d94b      	bls.n	8002954 <_svfiprintf_r+0x17c>
 80028bc:	b1b0      	cbz	r0, 80028ec <_svfiprintf_r+0x114>
 80028be:	9207      	str	r2, [sp, #28]
 80028c0:	e014      	b.n	80028ec <_svfiprintf_r+0x114>
 80028c2:	eba0 0308 	sub.w	r3, r0, r8
 80028c6:	fa09 f303 	lsl.w	r3, r9, r3
 80028ca:	4313      	orrs	r3, r2
 80028cc:	46a2      	mov	sl, r4
 80028ce:	9304      	str	r3, [sp, #16]
 80028d0:	e7d2      	b.n	8002878 <_svfiprintf_r+0xa0>
 80028d2:	9b03      	ldr	r3, [sp, #12]
 80028d4:	1d19      	adds	r1, r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	9103      	str	r1, [sp, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bfbb      	ittet	lt
 80028de:	425b      	neglt	r3, r3
 80028e0:	f042 0202 	orrlt.w	r2, r2, #2
 80028e4:	9307      	strge	r3, [sp, #28]
 80028e6:	9307      	strlt	r3, [sp, #28]
 80028e8:	bfb8      	it	lt
 80028ea:	9204      	strlt	r2, [sp, #16]
 80028ec:	7823      	ldrb	r3, [r4, #0]
 80028ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80028f0:	d10a      	bne.n	8002908 <_svfiprintf_r+0x130>
 80028f2:	7863      	ldrb	r3, [r4, #1]
 80028f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80028f6:	d132      	bne.n	800295e <_svfiprintf_r+0x186>
 80028f8:	9b03      	ldr	r3, [sp, #12]
 80028fa:	3402      	adds	r4, #2
 80028fc:	1d1a      	adds	r2, r3, #4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	9203      	str	r2, [sp, #12]
 8002902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002906:	9305      	str	r3, [sp, #20]
 8002908:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80029c0 <_svfiprintf_r+0x1e8>
 800290c:	2203      	movs	r2, #3
 800290e:	4650      	mov	r0, sl
 8002910:	7821      	ldrb	r1, [r4, #0]
 8002912:	f000 fa19 	bl	8002d48 <memchr>
 8002916:	b138      	cbz	r0, 8002928 <_svfiprintf_r+0x150>
 8002918:	2240      	movs	r2, #64	@ 0x40
 800291a:	9b04      	ldr	r3, [sp, #16]
 800291c:	eba0 000a 	sub.w	r0, r0, sl
 8002920:	4082      	lsls	r2, r0
 8002922:	4313      	orrs	r3, r2
 8002924:	3401      	adds	r4, #1
 8002926:	9304      	str	r3, [sp, #16]
 8002928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800292c:	2206      	movs	r2, #6
 800292e:	4825      	ldr	r0, [pc, #148]	@ (80029c4 <_svfiprintf_r+0x1ec>)
 8002930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002934:	f000 fa08 	bl	8002d48 <memchr>
 8002938:	2800      	cmp	r0, #0
 800293a:	d036      	beq.n	80029aa <_svfiprintf_r+0x1d2>
 800293c:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <_svfiprintf_r+0x1f0>)
 800293e:	bb1b      	cbnz	r3, 8002988 <_svfiprintf_r+0x1b0>
 8002940:	9b03      	ldr	r3, [sp, #12]
 8002942:	3307      	adds	r3, #7
 8002944:	f023 0307 	bic.w	r3, r3, #7
 8002948:	3308      	adds	r3, #8
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800294e:	4433      	add	r3, r6
 8002950:	9309      	str	r3, [sp, #36]	@ 0x24
 8002952:	e76a      	b.n	800282a <_svfiprintf_r+0x52>
 8002954:	460c      	mov	r4, r1
 8002956:	2001      	movs	r0, #1
 8002958:	fb0c 3202 	mla	r2, ip, r2, r3
 800295c:	e7a8      	b.n	80028b0 <_svfiprintf_r+0xd8>
 800295e:	2300      	movs	r3, #0
 8002960:	f04f 0c0a 	mov.w	ip, #10
 8002964:	4619      	mov	r1, r3
 8002966:	3401      	adds	r4, #1
 8002968:	9305      	str	r3, [sp, #20]
 800296a:	4620      	mov	r0, r4
 800296c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002970:	3a30      	subs	r2, #48	@ 0x30
 8002972:	2a09      	cmp	r2, #9
 8002974:	d903      	bls.n	800297e <_svfiprintf_r+0x1a6>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0c6      	beq.n	8002908 <_svfiprintf_r+0x130>
 800297a:	9105      	str	r1, [sp, #20]
 800297c:	e7c4      	b.n	8002908 <_svfiprintf_r+0x130>
 800297e:	4604      	mov	r4, r0
 8002980:	2301      	movs	r3, #1
 8002982:	fb0c 2101 	mla	r1, ip, r1, r2
 8002986:	e7f0      	b.n	800296a <_svfiprintf_r+0x192>
 8002988:	ab03      	add	r3, sp, #12
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	462a      	mov	r2, r5
 800298e:	4638      	mov	r0, r7
 8002990:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <_svfiprintf_r+0x1f4>)
 8002992:	a904      	add	r1, sp, #16
 8002994:	f3af 8000 	nop.w
 8002998:	1c42      	adds	r2, r0, #1
 800299a:	4606      	mov	r6, r0
 800299c:	d1d6      	bne.n	800294c <_svfiprintf_r+0x174>
 800299e:	89ab      	ldrh	r3, [r5, #12]
 80029a0:	065b      	lsls	r3, r3, #25
 80029a2:	f53f af2d 	bmi.w	8002800 <_svfiprintf_r+0x28>
 80029a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029a8:	e72c      	b.n	8002804 <_svfiprintf_r+0x2c>
 80029aa:	ab03      	add	r3, sp, #12
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	462a      	mov	r2, r5
 80029b0:	4638      	mov	r0, r7
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <_svfiprintf_r+0x1f4>)
 80029b4:	a904      	add	r1, sp, #16
 80029b6:	f000 f87d 	bl	8002ab4 <_printf_i>
 80029ba:	e7ed      	b.n	8002998 <_svfiprintf_r+0x1c0>
 80029bc:	08002e96 	.word	0x08002e96
 80029c0:	08002e9c 	.word	0x08002e9c
 80029c4:	08002ea0 	.word	0x08002ea0
 80029c8:	00000000 	.word	0x00000000
 80029cc:	08002721 	.word	0x08002721

080029d0 <_printf_common>:
 80029d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d4:	4616      	mov	r6, r2
 80029d6:	4698      	mov	r8, r3
 80029d8:	688a      	ldr	r2, [r1, #8]
 80029da:	690b      	ldr	r3, [r1, #16]
 80029dc:	4607      	mov	r7, r0
 80029de:	4293      	cmp	r3, r2
 80029e0:	bfb8      	it	lt
 80029e2:	4613      	movlt	r3, r2
 80029e4:	6033      	str	r3, [r6, #0]
 80029e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029ea:	460c      	mov	r4, r1
 80029ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029f0:	b10a      	cbz	r2, 80029f6 <_printf_common+0x26>
 80029f2:	3301      	adds	r3, #1
 80029f4:	6033      	str	r3, [r6, #0]
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	0699      	lsls	r1, r3, #26
 80029fa:	bf42      	ittt	mi
 80029fc:	6833      	ldrmi	r3, [r6, #0]
 80029fe:	3302      	addmi	r3, #2
 8002a00:	6033      	strmi	r3, [r6, #0]
 8002a02:	6825      	ldr	r5, [r4, #0]
 8002a04:	f015 0506 	ands.w	r5, r5, #6
 8002a08:	d106      	bne.n	8002a18 <_printf_common+0x48>
 8002a0a:	f104 0a19 	add.w	sl, r4, #25
 8002a0e:	68e3      	ldr	r3, [r4, #12]
 8002a10:	6832      	ldr	r2, [r6, #0]
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	42ab      	cmp	r3, r5
 8002a16:	dc2b      	bgt.n	8002a70 <_printf_common+0xa0>
 8002a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a1c:	6822      	ldr	r2, [r4, #0]
 8002a1e:	3b00      	subs	r3, #0
 8002a20:	bf18      	it	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	0692      	lsls	r2, r2, #26
 8002a26:	d430      	bmi.n	8002a8a <_printf_common+0xba>
 8002a28:	4641      	mov	r1, r8
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a30:	47c8      	blx	r9
 8002a32:	3001      	adds	r0, #1
 8002a34:	d023      	beq.n	8002a7e <_printf_common+0xae>
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	6922      	ldr	r2, [r4, #16]
 8002a3a:	f003 0306 	and.w	r3, r3, #6
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	bf14      	ite	ne
 8002a42:	2500      	movne	r5, #0
 8002a44:	6833      	ldreq	r3, [r6, #0]
 8002a46:	f04f 0600 	mov.w	r6, #0
 8002a4a:	bf08      	it	eq
 8002a4c:	68e5      	ldreq	r5, [r4, #12]
 8002a4e:	f104 041a 	add.w	r4, r4, #26
 8002a52:	bf08      	it	eq
 8002a54:	1aed      	subeq	r5, r5, r3
 8002a56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a5a:	bf08      	it	eq
 8002a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bfc4      	itt	gt
 8002a64:	1a9b      	subgt	r3, r3, r2
 8002a66:	18ed      	addgt	r5, r5, r3
 8002a68:	42b5      	cmp	r5, r6
 8002a6a:	d11a      	bne.n	8002aa2 <_printf_common+0xd2>
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	e008      	b.n	8002a82 <_printf_common+0xb2>
 8002a70:	2301      	movs	r3, #1
 8002a72:	4652      	mov	r2, sl
 8002a74:	4641      	mov	r1, r8
 8002a76:	4638      	mov	r0, r7
 8002a78:	47c8      	blx	r9
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d103      	bne.n	8002a86 <_printf_common+0xb6>
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a86:	3501      	adds	r5, #1
 8002a88:	e7c1      	b.n	8002a0e <_printf_common+0x3e>
 8002a8a:	2030      	movs	r0, #48	@ 0x30
 8002a8c:	18e1      	adds	r1, r4, r3
 8002a8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a98:	4422      	add	r2, r4
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002aa0:	e7c2      	b.n	8002a28 <_printf_common+0x58>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	47c8      	blx	r9
 8002aac:	3001      	adds	r0, #1
 8002aae:	d0e6      	beq.n	8002a7e <_printf_common+0xae>
 8002ab0:	3601      	adds	r6, #1
 8002ab2:	e7d9      	b.n	8002a68 <_printf_common+0x98>

08002ab4 <_printf_i>:
 8002ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab8:	7e0f      	ldrb	r7, [r1, #24]
 8002aba:	4691      	mov	r9, r2
 8002abc:	2f78      	cmp	r7, #120	@ 0x78
 8002abe:	4680      	mov	r8, r0
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	469a      	mov	sl, r3
 8002ac4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ac6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002aca:	d807      	bhi.n	8002adc <_printf_i+0x28>
 8002acc:	2f62      	cmp	r7, #98	@ 0x62
 8002ace:	d80a      	bhi.n	8002ae6 <_printf_i+0x32>
 8002ad0:	2f00      	cmp	r7, #0
 8002ad2:	f000 80d3 	beq.w	8002c7c <_printf_i+0x1c8>
 8002ad6:	2f58      	cmp	r7, #88	@ 0x58
 8002ad8:	f000 80ba 	beq.w	8002c50 <_printf_i+0x19c>
 8002adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ae0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ae4:	e03a      	b.n	8002b5c <_printf_i+0xa8>
 8002ae6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002aea:	2b15      	cmp	r3, #21
 8002aec:	d8f6      	bhi.n	8002adc <_printf_i+0x28>
 8002aee:	a101      	add	r1, pc, #4	@ (adr r1, 8002af4 <_printf_i+0x40>)
 8002af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002af4:	08002b4d 	.word	0x08002b4d
 8002af8:	08002b61 	.word	0x08002b61
 8002afc:	08002add 	.word	0x08002add
 8002b00:	08002add 	.word	0x08002add
 8002b04:	08002add 	.word	0x08002add
 8002b08:	08002add 	.word	0x08002add
 8002b0c:	08002b61 	.word	0x08002b61
 8002b10:	08002add 	.word	0x08002add
 8002b14:	08002add 	.word	0x08002add
 8002b18:	08002add 	.word	0x08002add
 8002b1c:	08002add 	.word	0x08002add
 8002b20:	08002c63 	.word	0x08002c63
 8002b24:	08002b8b 	.word	0x08002b8b
 8002b28:	08002c1d 	.word	0x08002c1d
 8002b2c:	08002add 	.word	0x08002add
 8002b30:	08002add 	.word	0x08002add
 8002b34:	08002c85 	.word	0x08002c85
 8002b38:	08002add 	.word	0x08002add
 8002b3c:	08002b8b 	.word	0x08002b8b
 8002b40:	08002add 	.word	0x08002add
 8002b44:	08002add 	.word	0x08002add
 8002b48:	08002c25 	.word	0x08002c25
 8002b4c:	6833      	ldr	r3, [r6, #0]
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6032      	str	r2, [r6, #0]
 8002b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e09e      	b.n	8002c9e <_printf_i+0x1ea>
 8002b60:	6833      	ldr	r3, [r6, #0]
 8002b62:	6820      	ldr	r0, [r4, #0]
 8002b64:	1d19      	adds	r1, r3, #4
 8002b66:	6031      	str	r1, [r6, #0]
 8002b68:	0606      	lsls	r6, r0, #24
 8002b6a:	d501      	bpl.n	8002b70 <_printf_i+0xbc>
 8002b6c:	681d      	ldr	r5, [r3, #0]
 8002b6e:	e003      	b.n	8002b78 <_printf_i+0xc4>
 8002b70:	0645      	lsls	r5, r0, #25
 8002b72:	d5fb      	bpl.n	8002b6c <_printf_i+0xb8>
 8002b74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b78:	2d00      	cmp	r5, #0
 8002b7a:	da03      	bge.n	8002b84 <_printf_i+0xd0>
 8002b7c:	232d      	movs	r3, #45	@ 0x2d
 8002b7e:	426d      	negs	r5, r5
 8002b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b84:	230a      	movs	r3, #10
 8002b86:	4859      	ldr	r0, [pc, #356]	@ (8002cec <_printf_i+0x238>)
 8002b88:	e011      	b.n	8002bae <_printf_i+0xfa>
 8002b8a:	6821      	ldr	r1, [r4, #0]
 8002b8c:	6833      	ldr	r3, [r6, #0]
 8002b8e:	0608      	lsls	r0, r1, #24
 8002b90:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b94:	d402      	bmi.n	8002b9c <_printf_i+0xe8>
 8002b96:	0649      	lsls	r1, r1, #25
 8002b98:	bf48      	it	mi
 8002b9a:	b2ad      	uxthmi	r5, r5
 8002b9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b9e:	6033      	str	r3, [r6, #0]
 8002ba0:	bf14      	ite	ne
 8002ba2:	230a      	movne	r3, #10
 8002ba4:	2308      	moveq	r3, #8
 8002ba6:	4851      	ldr	r0, [pc, #324]	@ (8002cec <_printf_i+0x238>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bae:	6866      	ldr	r6, [r4, #4]
 8002bb0:	2e00      	cmp	r6, #0
 8002bb2:	bfa8      	it	ge
 8002bb4:	6821      	ldrge	r1, [r4, #0]
 8002bb6:	60a6      	str	r6, [r4, #8]
 8002bb8:	bfa4      	itt	ge
 8002bba:	f021 0104 	bicge.w	r1, r1, #4
 8002bbe:	6021      	strge	r1, [r4, #0]
 8002bc0:	b90d      	cbnz	r5, 8002bc6 <_printf_i+0x112>
 8002bc2:	2e00      	cmp	r6, #0
 8002bc4:	d04b      	beq.n	8002c5e <_printf_i+0x1aa>
 8002bc6:	4616      	mov	r6, r2
 8002bc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bcc:	fb03 5711 	mls	r7, r3, r1, r5
 8002bd0:	5dc7      	ldrb	r7, [r0, r7]
 8002bd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bd6:	462f      	mov	r7, r5
 8002bd8:	42bb      	cmp	r3, r7
 8002bda:	460d      	mov	r5, r1
 8002bdc:	d9f4      	bls.n	8002bc8 <_printf_i+0x114>
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d10b      	bne.n	8002bfa <_printf_i+0x146>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	07df      	lsls	r7, r3, #31
 8002be6:	d508      	bpl.n	8002bfa <_printf_i+0x146>
 8002be8:	6923      	ldr	r3, [r4, #16]
 8002bea:	6861      	ldr	r1, [r4, #4]
 8002bec:	4299      	cmp	r1, r3
 8002bee:	bfde      	ittt	le
 8002bf0:	2330      	movle	r3, #48	@ 0x30
 8002bf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bfa:	1b92      	subs	r2, r2, r6
 8002bfc:	6122      	str	r2, [r4, #16]
 8002bfe:	464b      	mov	r3, r9
 8002c00:	4621      	mov	r1, r4
 8002c02:	4640      	mov	r0, r8
 8002c04:	f8cd a000 	str.w	sl, [sp]
 8002c08:	aa03      	add	r2, sp, #12
 8002c0a:	f7ff fee1 	bl	80029d0 <_printf_common>
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d14a      	bne.n	8002ca8 <_printf_i+0x1f4>
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295
 8002c16:	b004      	add	sp, #16
 8002c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	6023      	str	r3, [r4, #0]
 8002c24:	2778      	movs	r7, #120	@ 0x78
 8002c26:	4832      	ldr	r0, [pc, #200]	@ (8002cf0 <_printf_i+0x23c>)
 8002c28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	6831      	ldr	r1, [r6, #0]
 8002c30:	061f      	lsls	r7, r3, #24
 8002c32:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c36:	d402      	bmi.n	8002c3e <_printf_i+0x18a>
 8002c38:	065f      	lsls	r7, r3, #25
 8002c3a:	bf48      	it	mi
 8002c3c:	b2ad      	uxthmi	r5, r5
 8002c3e:	6031      	str	r1, [r6, #0]
 8002c40:	07d9      	lsls	r1, r3, #31
 8002c42:	bf44      	itt	mi
 8002c44:	f043 0320 	orrmi.w	r3, r3, #32
 8002c48:	6023      	strmi	r3, [r4, #0]
 8002c4a:	b11d      	cbz	r5, 8002c54 <_printf_i+0x1a0>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	e7ab      	b.n	8002ba8 <_printf_i+0xf4>
 8002c50:	4826      	ldr	r0, [pc, #152]	@ (8002cec <_printf_i+0x238>)
 8002c52:	e7e9      	b.n	8002c28 <_printf_i+0x174>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	f023 0320 	bic.w	r3, r3, #32
 8002c5a:	6023      	str	r3, [r4, #0]
 8002c5c:	e7f6      	b.n	8002c4c <_printf_i+0x198>
 8002c5e:	4616      	mov	r6, r2
 8002c60:	e7bd      	b.n	8002bde <_printf_i+0x12a>
 8002c62:	6833      	ldr	r3, [r6, #0]
 8002c64:	6825      	ldr	r5, [r4, #0]
 8002c66:	1d18      	adds	r0, r3, #4
 8002c68:	6961      	ldr	r1, [r4, #20]
 8002c6a:	6030      	str	r0, [r6, #0]
 8002c6c:	062e      	lsls	r6, r5, #24
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	d501      	bpl.n	8002c76 <_printf_i+0x1c2>
 8002c72:	6019      	str	r1, [r3, #0]
 8002c74:	e002      	b.n	8002c7c <_printf_i+0x1c8>
 8002c76:	0668      	lsls	r0, r5, #25
 8002c78:	d5fb      	bpl.n	8002c72 <_printf_i+0x1be>
 8002c7a:	8019      	strh	r1, [r3, #0]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4616      	mov	r6, r2
 8002c80:	6123      	str	r3, [r4, #16]
 8002c82:	e7bc      	b.n	8002bfe <_printf_i+0x14a>
 8002c84:	6833      	ldr	r3, [r6, #0]
 8002c86:	2100      	movs	r1, #0
 8002c88:	1d1a      	adds	r2, r3, #4
 8002c8a:	6032      	str	r2, [r6, #0]
 8002c8c:	681e      	ldr	r6, [r3, #0]
 8002c8e:	6862      	ldr	r2, [r4, #4]
 8002c90:	4630      	mov	r0, r6
 8002c92:	f000 f859 	bl	8002d48 <memchr>
 8002c96:	b108      	cbz	r0, 8002c9c <_printf_i+0x1e8>
 8002c98:	1b80      	subs	r0, r0, r6
 8002c9a:	6060      	str	r0, [r4, #4]
 8002c9c:	6863      	ldr	r3, [r4, #4]
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ca6:	e7aa      	b.n	8002bfe <_printf_i+0x14a>
 8002ca8:	4632      	mov	r2, r6
 8002caa:	4649      	mov	r1, r9
 8002cac:	4640      	mov	r0, r8
 8002cae:	6923      	ldr	r3, [r4, #16]
 8002cb0:	47d0      	blx	sl
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d0ad      	beq.n	8002c12 <_printf_i+0x15e>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	079b      	lsls	r3, r3, #30
 8002cba:	d413      	bmi.n	8002ce4 <_printf_i+0x230>
 8002cbc:	68e0      	ldr	r0, [r4, #12]
 8002cbe:	9b03      	ldr	r3, [sp, #12]
 8002cc0:	4298      	cmp	r0, r3
 8002cc2:	bfb8      	it	lt
 8002cc4:	4618      	movlt	r0, r3
 8002cc6:	e7a6      	b.n	8002c16 <_printf_i+0x162>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	4632      	mov	r2, r6
 8002ccc:	4649      	mov	r1, r9
 8002cce:	4640      	mov	r0, r8
 8002cd0:	47d0      	blx	sl
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d09d      	beq.n	8002c12 <_printf_i+0x15e>
 8002cd6:	3501      	adds	r5, #1
 8002cd8:	68e3      	ldr	r3, [r4, #12]
 8002cda:	9903      	ldr	r1, [sp, #12]
 8002cdc:	1a5b      	subs	r3, r3, r1
 8002cde:	42ab      	cmp	r3, r5
 8002ce0:	dcf2      	bgt.n	8002cc8 <_printf_i+0x214>
 8002ce2:	e7eb      	b.n	8002cbc <_printf_i+0x208>
 8002ce4:	2500      	movs	r5, #0
 8002ce6:	f104 0619 	add.w	r6, r4, #25
 8002cea:	e7f5      	b.n	8002cd8 <_printf_i+0x224>
 8002cec:	08002ea7 	.word	0x08002ea7
 8002cf0:	08002eb8 	.word	0x08002eb8

08002cf4 <memmove>:
 8002cf4:	4288      	cmp	r0, r1
 8002cf6:	b510      	push	{r4, lr}
 8002cf8:	eb01 0402 	add.w	r4, r1, r2
 8002cfc:	d902      	bls.n	8002d04 <memmove+0x10>
 8002cfe:	4284      	cmp	r4, r0
 8002d00:	4623      	mov	r3, r4
 8002d02:	d807      	bhi.n	8002d14 <memmove+0x20>
 8002d04:	1e43      	subs	r3, r0, #1
 8002d06:	42a1      	cmp	r1, r4
 8002d08:	d008      	beq.n	8002d1c <memmove+0x28>
 8002d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d12:	e7f8      	b.n	8002d06 <memmove+0x12>
 8002d14:	4601      	mov	r1, r0
 8002d16:	4402      	add	r2, r0
 8002d18:	428a      	cmp	r2, r1
 8002d1a:	d100      	bne.n	8002d1e <memmove+0x2a>
 8002d1c:	bd10      	pop	{r4, pc}
 8002d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d26:	e7f7      	b.n	8002d18 <memmove+0x24>

08002d28 <_sbrk_r>:
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	4d05      	ldr	r5, [pc, #20]	@ (8002d44 <_sbrk_r+0x1c>)
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4608      	mov	r0, r1
 8002d32:	602b      	str	r3, [r5, #0]
 8002d34:	f7fd fc88 	bl	8000648 <_sbrk>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d102      	bne.n	8002d42 <_sbrk_r+0x1a>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	b103      	cbz	r3, 8002d42 <_sbrk_r+0x1a>
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	20000258 	.word	0x20000258

08002d48 <memchr>:
 8002d48:	4603      	mov	r3, r0
 8002d4a:	b510      	push	{r4, lr}
 8002d4c:	b2c9      	uxtb	r1, r1
 8002d4e:	4402      	add	r2, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	d101      	bne.n	8002d5a <memchr+0x12>
 8002d56:	2000      	movs	r0, #0
 8002d58:	e003      	b.n	8002d62 <memchr+0x1a>
 8002d5a:	7804      	ldrb	r4, [r0, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	428c      	cmp	r4, r1
 8002d60:	d1f6      	bne.n	8002d50 <memchr+0x8>
 8002d62:	bd10      	pop	{r4, pc}

08002d64 <memcpy>:
 8002d64:	440a      	add	r2, r1
 8002d66:	4291      	cmp	r1, r2
 8002d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d6c:	d100      	bne.n	8002d70 <memcpy+0xc>
 8002d6e:	4770      	bx	lr
 8002d70:	b510      	push	{r4, lr}
 8002d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d76:	4291      	cmp	r1, r2
 8002d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d7c:	d1f9      	bne.n	8002d72 <memcpy+0xe>
 8002d7e:	bd10      	pop	{r4, pc}

08002d80 <_realloc_r>:
 8002d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d84:	4680      	mov	r8, r0
 8002d86:	4615      	mov	r5, r2
 8002d88:	460c      	mov	r4, r1
 8002d8a:	b921      	cbnz	r1, 8002d96 <_realloc_r+0x16>
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d92:	f7ff bc39 	b.w	8002608 <_malloc_r>
 8002d96:	b92a      	cbnz	r2, 8002da4 <_realloc_r+0x24>
 8002d98:	f7ff fbcc 	bl	8002534 <_free_r>
 8002d9c:	2400      	movs	r4, #0
 8002d9e:	4620      	mov	r0, r4
 8002da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da4:	f000 f81a 	bl	8002ddc <_malloc_usable_size_r>
 8002da8:	4285      	cmp	r5, r0
 8002daa:	4606      	mov	r6, r0
 8002dac:	d802      	bhi.n	8002db4 <_realloc_r+0x34>
 8002dae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002db2:	d8f4      	bhi.n	8002d9e <_realloc_r+0x1e>
 8002db4:	4629      	mov	r1, r5
 8002db6:	4640      	mov	r0, r8
 8002db8:	f7ff fc26 	bl	8002608 <_malloc_r>
 8002dbc:	4607      	mov	r7, r0
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d0ec      	beq.n	8002d9c <_realloc_r+0x1c>
 8002dc2:	42b5      	cmp	r5, r6
 8002dc4:	462a      	mov	r2, r5
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	bf28      	it	cs
 8002dca:	4632      	movcs	r2, r6
 8002dcc:	f7ff ffca 	bl	8002d64 <memcpy>
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	4640      	mov	r0, r8
 8002dd4:	f7ff fbae 	bl	8002534 <_free_r>
 8002dd8:	463c      	mov	r4, r7
 8002dda:	e7e0      	b.n	8002d9e <_realloc_r+0x1e>

08002ddc <_malloc_usable_size_r>:
 8002ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002de0:	1f18      	subs	r0, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bfbc      	itt	lt
 8002de6:	580b      	ldrlt	r3, [r1, r0]
 8002de8:	18c0      	addlt	r0, r0, r3
 8002dea:	4770      	bx	lr

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
