
PS2_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002ed4  08002ed4  00003ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f8c  08002f8c  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f8c  08002f8c  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f8c  08002f8c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f8c  08002f8c  00003f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f90  08002f90  00003f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002f94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08002ff0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08002ff0  00004268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008953  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a00  00000000  00000000  0000c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0000e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000662  00000000  00000000  0000ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001742f  00000000  00000000  0000f2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7e7  00000000  00000000  000266d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a0d  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b58c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d8  00000000  00000000  000b5908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000b7ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ebc 	.word	0x08002ebc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002ebc 	.word	0x08002ebc

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b21      	ldr	r3, [pc, #132]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a20      	ldr	r2, [pc, #128]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1e      	ldr	r3, [pc, #120]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b1b      	ldr	r3, [pc, #108]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1a      	ldr	r2, [pc, #104]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b18      	ldr	r3, [pc, #96]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000196:	4815      	ldr	r0, [pc, #84]	@ (80001ec <MX_GPIO_Init+0xa0>)
 8000198:	f000 fe46 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2110      	movs	r1, #16
 80001a0:	4813      	ldr	r0, [pc, #76]	@ (80001f0 <MX_GPIO_Init+0xa4>)
 80001a2:	f000 fe41 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b0:	2300      	movs	r3, #0
 80001b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b4:	2302      	movs	r3, #2
 80001b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001b8:	f107 0308 	add.w	r3, r7, #8
 80001bc:	4619      	mov	r1, r3
 80001be:	480b      	ldr	r0, [pc, #44]	@ (80001ec <MX_GPIO_Init+0xa0>)
 80001c0:	f000 fcae 	bl	8000b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80001c4:	2310      	movs	r3, #16
 80001c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2301      	movs	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001cc:	2300      	movs	r3, #0
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d0:	2302      	movs	r3, #2
 80001d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d4:	f107 0308 	add.w	r3, r7, #8
 80001d8:	4619      	mov	r1, r3
 80001da:	4805      	ldr	r0, [pc, #20]	@ (80001f0 <MX_GPIO_Init+0xa4>)
 80001dc:	f000 fca0 	bl	8000b20 <HAL_GPIO_Init>

}
 80001e0:	bf00      	nop
 80001e2:	3718      	adds	r7, #24
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40011000 	.word	0x40011000
 80001f0:	40010800 	.word	0x40010800

080001f4 <PS2_Cmd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PS2_Cmd(uint8_t* TxData, uint8_t* RxData, uint8_t size)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af02      	add	r7, sp, #8
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	4613      	mov	r3, r2
 8000200:	71fb      	strb	r3, [r7, #7]
	if (RxData == NULL)
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d107      	bne.n	8000218 <PS2_Cmd+0x24>
		HAL_SPI_Transmit(&hspi1, TxData, size, 100);
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	b29a      	uxth	r2, r3
 800020c:	2364      	movs	r3, #100	@ 0x64
 800020e:	68f9      	ldr	r1, [r7, #12]
 8000210:	4808      	ldr	r0, [pc, #32]	@ (8000234 <PS2_Cmd+0x40>)
 8000212:	f001 facf 	bl	80017b4 <HAL_SPI_Transmit>
	else
		HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, size, 100);

}
 8000216:	e008      	b.n	800022a <PS2_Cmd+0x36>
		HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, size, 100);
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	b29b      	uxth	r3, r3
 800021c:	2264      	movs	r2, #100	@ 0x64
 800021e:	9200      	str	r2, [sp, #0]
 8000220:	68ba      	ldr	r2, [r7, #8]
 8000222:	68f9      	ldr	r1, [r7, #12]
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <PS2_Cmd+0x40>)
 8000226:	f001 fd20 	bl	8001c6a <HAL_SPI_TransmitReceive>
}
 800022a:	bf00      	nop
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000078 	.word	0x20000078

08000238 <PS2_Init>:

void PS2_Init ()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	@ 0x40
 800023c:	af00      	add	r7, sp, #0
	uint8_t EnterConfig[9] = {0x01, 0x43, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
	uint8_t Setup[9] = {0x01, 0x44, 0x00, 0x01, 0xEE, 0x00, 0x00, 0x00, 0x00};
	uint8_t VibrationMode[5] = {0x01, 0x4D, 0x00, 0x00, 0x01};
	uint8_t ExitConfig[9] = {0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
*/
	uint8_t ShortPoll[5] = {0x01, 0x42, 0x00, 0xff, 0xff};
 800023e:	4a31      	ldr	r2, [pc, #196]	@ (8000304 <PS2_Init+0xcc>)
 8000240:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000248:	6018      	str	r0, [r3, #0]
 800024a:	3304      	adds	r3, #4
 800024c:	7019      	strb	r1, [r3, #0]
	uint8_t EnterConfig[5] = {0x01, 0x43, 0x00, 0x01, 0x00};
 800024e:	4a2e      	ldr	r2, [pc, #184]	@ (8000308 <PS2_Init+0xd0>)
 8000250:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000258:	6018      	str	r0, [r3, #0]
 800025a:	3304      	adds	r3, #4
 800025c:	7019      	strb	r1, [r3, #0]
	uint8_t Setup[9] = {0x01, 0x44, 0x00, 0x01, 0xEE, 0x00, 0x00, 0x00, 0x00};
 800025e:	4a2b      	ldr	r2, [pc, #172]	@ (800030c <PS2_Init+0xd4>)
 8000260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000264:	ca07      	ldmia	r2, {r0, r1, r2}
 8000266:	c303      	stmia	r3!, {r0, r1}
 8000268:	701a      	strb	r2, [r3, #0]
	uint8_t VibrationMode[9] = {0x01, 0x4D, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff};
 800026a:	4a29      	ldr	r2, [pc, #164]	@ (8000310 <PS2_Init+0xd8>)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	ca07      	ldmia	r2, {r0, r1, r2}
 8000272:	c303      	stmia	r3!, {r0, r1}
 8000274:	701a      	strb	r2, [r3, #0]
	uint8_t Push[9] = {0x01, 0x4F, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00};
 8000276:	4a27      	ldr	r2, [pc, #156]	@ (8000314 <PS2_Init+0xdc>)
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	ca07      	ldmia	r2, {r0, r1, r2}
 800027e:	c303      	stmia	r3!, {r0, r1}
 8000280:	701a      	strb	r2, [r3, #0]
	uint8_t ExitConfig[9] = {0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
 8000282:	4a25      	ldr	r2, [pc, #148]	@ (8000318 <PS2_Init+0xe0>)
 8000284:	463b      	mov	r3, r7
 8000286:	ca07      	ldmia	r2, {r0, r1, r2}
 8000288:	c303      	stmia	r3!, {r0, r1}
 800028a:	701a      	strb	r2, [r3, #0]

	PS2_Cmd(ShortPoll, NULL, 5);
 800028c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000290:	2205      	movs	r2, #5
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ffad 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(ShortPoll, NULL, 5);
 800029a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800029e:	2205      	movs	r2, #5
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffa6 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(ShortPoll, NULL, 5);
 80002a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80002ac:	2205      	movs	r2, #5
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff9f 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(EnterConfig, NULL, 5);
 80002b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002ba:	2205      	movs	r2, #5
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff98 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(Setup, NULL, 9);
 80002c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c8:	2209      	movs	r2, #9
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff91 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(VibrationMode, NULL, 9);
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2209      	movs	r2, #9
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff8a 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(Push, NULL, 9);
 80002e0:	f107 030c 	add.w	r3, r7, #12
 80002e4:	2209      	movs	r2, #9
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff83 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(ExitConfig, NULL, 9);
 80002ee:	463b      	mov	r3, r7
 80002f0:	2209      	movs	r2, #9
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff7d 	bl	80001f4 <PS2_Cmd>
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	@ 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	08002ed4 	.word	0x08002ed4
 8000308:	08002edc 	.word	0x08002edc
 800030c:	08002ee4 	.word	0x08002ee4
 8000310:	08002ef0 	.word	0x08002ef0
 8000314:	08002efc 	.word	0x08002efc
 8000318:	08002f08 	.word	0x08002f08

0800031c <PS2_Start>:

void PS2_Start(uint8_t* ID)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	CS_H; CS_L; HAL_Delay(1);
 8000324:	2201      	movs	r2, #1
 8000326:	2110      	movs	r1, #16
 8000328:	4810      	ldr	r0, [pc, #64]	@ (800036c <PS2_Start+0x50>)
 800032a:	f000 fd7d 	bl	8000e28 <HAL_GPIO_WritePin>
 800032e:	2200      	movs	r2, #0
 8000330:	2110      	movs	r1, #16
 8000332:	480e      	ldr	r0, [pc, #56]	@ (800036c <PS2_Start+0x50>)
 8000334:	f000 fd78 	bl	8000e28 <HAL_GPIO_WritePin>
 8000338:	2001      	movs	r0, #1
 800033a:	f000 fae9 	bl	8000910 <HAL_Delay>
	PS2_Cmd(0x01, NULL, 1);
 800033e:	2201      	movs	r2, #1
 8000340:	2100      	movs	r1, #0
 8000342:	2001      	movs	r0, #1
 8000344:	f7ff ff56 	bl	80001f4 <PS2_Cmd>
	PS2_Cmd(0x42, ID, 1);
 8000348:	2201      	movs	r2, #1
 800034a:	6879      	ldr	r1, [r7, #4]
 800034c:	2042      	movs	r0, #66	@ 0x42
 800034e:	f7ff ff51 	bl	80001f4 <PS2_Cmd>
	CS_H; HAL_Delay(1);
 8000352:	2201      	movs	r2, #1
 8000354:	2110      	movs	r1, #16
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <PS2_Start+0x50>)
 8000358:	f000 fd66 	bl	8000e28 <HAL_GPIO_WritePin>
 800035c:	2001      	movs	r0, #1
 800035e:	f000 fad7 	bl	8000910 <HAL_Delay>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010c00 	.word	0x40010c00

08000370 <PS2_ReadData>:

void PS2_ReadData(uint8_t *data, uint8_t* id)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	CS_H; CS_L; HAL_Delay(1);
 800037a:	2201      	movs	r2, #1
 800037c:	2110      	movs	r1, #16
 800037e:	4810      	ldr	r0, [pc, #64]	@ (80003c0 <PS2_ReadData+0x50>)
 8000380:	f000 fd52 	bl	8000e28 <HAL_GPIO_WritePin>
 8000384:	2200      	movs	r2, #0
 8000386:	2110      	movs	r1, #16
 8000388:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <PS2_ReadData+0x50>)
 800038a:	f000 fd4d 	bl	8000e28 <HAL_GPIO_WritePin>
 800038e:	2001      	movs	r0, #1
 8000390:	f000 fabe 	bl	8000910 <HAL_Delay>
	PS2_Start(id);
 8000394:	6838      	ldr	r0, [r7, #0]
 8000396:	f7ff ffc1 	bl	800031c <PS2_Start>
	HAL_SPI_Receive(&hspi1, data, 7, 100);
 800039a:	2364      	movs	r3, #100	@ 0x64
 800039c:	2207      	movs	r2, #7
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	4808      	ldr	r0, [pc, #32]	@ (80003c4 <PS2_ReadData+0x54>)
 80003a2:	f001 fb4a 	bl	8001a3a <HAL_SPI_Receive>
	CS_H; HAL_Delay(1);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2110      	movs	r1, #16
 80003aa:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <PS2_ReadData+0x50>)
 80003ac:	f000 fd3c 	bl	8000e28 <HAL_GPIO_WritePin>
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 faad 	bl	8000910 <HAL_Delay>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40010c00 	.word	0x40010c00
 80003c4:	20000078 	.word	0x20000078

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b094      	sub	sp, #80	@ 0x50
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ce:	f000 fa3d 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d2:	f000 f843 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d6:	f7ff feb9 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 80003da:	f000 f881 	bl	80004e0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003de:	f000 f999 	bl	8000714 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PS2_Init();
 80003e2:	f7ff ff29 	bl	8000238 <PS2_Init>
  uint8_t Data[7] ={0};
 80003e6:	2300      	movs	r3, #0
 80003e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80003ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003ee:	2100      	movs	r1, #0
 80003f0:	460a      	mov	r2, r1
 80003f2:	801a      	strh	r2, [r3, #0]
 80003f4:	460a      	mov	r2, r1
 80003f6:	709a      	strb	r2, [r3, #2]
  uint8_t str[64];
  uint8_t ID = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000400:	4812      	ldr	r0, [pc, #72]	@ (800044c <main+0x84>)
 8000402:	f000 fd29 	bl	8000e58 <HAL_GPIO_TogglePin>
	  PS2_ReadData(Data, &ID);
 8000406:	1dfa      	adds	r2, r7, #7
 8000408:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800040c:	4611      	mov	r1, r2
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ffae 	bl	8000370 <PS2_ReadData>
	  sprintf(str, "Режим: 0x%x\n", ID);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	461a      	mov	r2, r3
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	490c      	ldr	r1, [pc, #48]	@ (8000450 <main+0x88>)
 800041e:	4618      	mov	r0, r3
 8000420:	f002 f89c 	bl	800255c <siprintf>
	  HAL_UART_Transmit(&huart1, str, 64, 100);
 8000424:	f107 0108 	add.w	r1, r7, #8
 8000428:	2364      	movs	r3, #100	@ 0x64
 800042a:	2240      	movs	r2, #64	@ 0x40
 800042c:	4809      	ldr	r0, [pc, #36]	@ (8000454 <main+0x8c>)
 800042e:	f001 ff15 	bl	800225c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "T\n", 2, 100);
 8000432:	2364      	movs	r3, #100	@ 0x64
 8000434:	2202      	movs	r2, #2
 8000436:	4908      	ldr	r1, [pc, #32]	@ (8000458 <main+0x90>)
 8000438:	4806      	ldr	r0, [pc, #24]	@ (8000454 <main+0x8c>)
 800043a:	f001 ff0f 	bl	800225c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800043e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000442:	f000 fa65 	bl	8000910 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000446:	bf00      	nop
 8000448:	e7d8      	b.n	80003fc <main+0x34>
 800044a:	bf00      	nop
 800044c:	40011000 	.word	0x40011000
 8000450:	08002f14 	.word	0x08002f14
 8000454:	200000d4 	.word	0x200000d4
 8000458:	08002f28 	.word	0x08002f28

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b090      	sub	sp, #64	@ 0x40
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0318 	add.w	r3, r7, #24
 8000466:	2228      	movs	r2, #40	@ 0x28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f002 f896 	bl	800259c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800047e:	2302      	movs	r3, #2
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000482:	2301      	movs	r3, #1
 8000484:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000486:	2310      	movs	r3, #16
 8000488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048a:	2300      	movs	r3, #0
 800048c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	f107 0318 	add.w	r3, r7, #24
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fcfa 	bl	8000e8c <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800049e:	f000 f818 	bl	80004d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 ff68 	bl	8001390 <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f804 	bl	80004d2 <Error_Handler>
  }
}
 80004ca:	bf00      	nop
 80004cc:	3740      	adds	r7, #64	@ 0x40
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d6:	b672      	cpsid	i
}
 80004d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004da:	bf00      	nop
 80004dc:	e7fd      	b.n	80004da <Error_Handler+0x8>
	...

080004e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80004e4:	4b17      	ldr	r3, [pc, #92]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004e6:	4a18      	ldr	r2, [pc, #96]	@ (8000548 <MX_SPI1_Init+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ea:	4b16      	ldr	r3, [pc, #88]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004f2:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004fe:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_SPI1_Init+0x64>)
 800050c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000510:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000514:	2220      	movs	r2, #32
 8000516:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <MX_SPI1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_SPI1_Init+0x64>)
 800052c:	220a      	movs	r2, #10
 800052e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000530:	4804      	ldr	r0, [pc, #16]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000532:	f001 f8bb 	bl	80016ac <HAL_SPI_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800053c:	f7ff ffc9 	bl	80004d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000078 	.word	0x20000078
 8000548:	40013000 	.word	0x40013000

0800054c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <HAL_SPI_MspInit+0x88>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d12f      	bne.n	80005cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800056c:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <HAL_SPI_MspInit+0x8c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a19      	ldr	r2, [pc, #100]	@ (80005d8 <HAL_SPI_MspInit+0x8c>)
 8000572:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <HAL_SPI_MspInit+0x8c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <HAL_SPI_MspInit+0x8c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <HAL_SPI_MspInit+0x8c>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <HAL_SPI_MspInit+0x8c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800059c:	23a0      	movs	r3, #160	@ 0xa0
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	480b      	ldr	r0, [pc, #44]	@ (80005dc <HAL_SPI_MspInit+0x90>)
 80005b0:	f000 fab6 	bl	8000b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005b4:	2340      	movs	r3, #64	@ 0x40
 80005b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <HAL_SPI_MspInit+0x90>)
 80005c8:	f000 faaa 	bl	8000b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40013000 	.word	0x40013000
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010800 	.word	0x40010800

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <HAL_MspInit+0x5c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <HAL_MspInit+0x5c>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <HAL_MspInit+0x5c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <HAL_MspInit+0x5c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_MspInit+0x60>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <HAL_MspInit+0x60>)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000
 8000640:	40010000 	.word	0x40010000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <NMI_Handler+0x4>

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <MemManage_Handler+0x4>

0800065c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <UsageFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 f920 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f001 ff6e 	bl	80025ac <__errno>
 80006d0:	4603      	mov	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <_sbrk+0x64>)
 80006ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20005000 	.word	0x20005000
 80006fc:	00000400 	.word	0x00000400
 8000700:	200000d0 	.word	0x200000d0
 8000704:	20000268 	.word	0x20000268

08000708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_USART1_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800074c:	f001 fd36 	bl	80021bc <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f7ff febc 	bl	80004d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d4 	.word	0x200000d4
 8000764:	40013800 	.word	0x40013800

08000768 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <HAL_UART_MspInit+0x8c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d131      	bne.n	80007ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <HAL_UART_MspInit+0x90>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a1a      	ldr	r2, [pc, #104]	@ (80007f8 <HAL_UART_MspInit+0x90>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <HAL_UART_MspInit+0x90>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <HAL_UART_MspInit+0x90>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <HAL_UART_MspInit+0x90>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_UART_MspInit+0x90>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <HAL_UART_MspInit+0x94>)
 80007ce:	f000 f9a7 	bl	8000b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_UART_MspInit+0x94>)
 80007e8:	f000 f99a 	bl	8000b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800

08000800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000800:	f7ff ff82 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000806:	490c      	ldr	r1, [pc, #48]	@ (8000838 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000808:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <LoopFillZerobss+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a09      	ldr	r2, [pc, #36]	@ (8000840 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800081c:	4c09      	ldr	r4, [pc, #36]	@ (8000844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082a:	f001 fec5 	bl	80025b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082e:	f7ff fdcb 	bl	80003c8 <main>
  bx lr
 8000832:	4770      	bx	lr
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800083c:	08002f94 	.word	0x08002f94
  ldr r2, =_sbss
 8000840:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000844:	20000268 	.word	0x20000268

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <HAL_Init+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <HAL_Init+0x28>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f92b 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff feba 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f935 	bl	8000b06 <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 f90b 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	@ (80008f8 <HAL_IncTick+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000008 	.word	0x20000008
 80008f8:	2000011c 	.word	0x2000011c

080008fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	2000011c 	.word	0x2000011c

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff fff0 	bl	80008fc <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffe0 	bl	80008fc <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	@ (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	@ (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	@ 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff90 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff49 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff5e 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff90 	bl	8000a10 <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5f 	bl	80009bc <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffb0 	bl	8000a74 <SysTick_Config>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b08b      	sub	sp, #44	@ 0x2c
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	e169      	b.n	8000e08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b34:	2201      	movs	r2, #1
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8158 	bne.w	8000e02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a9a      	ldr	r2, [pc, #616]	@ (8000dc0 <HAL_GPIO_Init+0x2a0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d05e      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b5c:	4a98      	ldr	r2, [pc, #608]	@ (8000dc0 <HAL_GPIO_Init+0x2a0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d875      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b62:	4a98      	ldr	r2, [pc, #608]	@ (8000dc4 <HAL_GPIO_Init+0x2a4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d058      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b68:	4a96      	ldr	r2, [pc, #600]	@ (8000dc4 <HAL_GPIO_Init+0x2a4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d86f      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b6e:	4a96      	ldr	r2, [pc, #600]	@ (8000dc8 <HAL_GPIO_Init+0x2a8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d052      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b74:	4a94      	ldr	r2, [pc, #592]	@ (8000dc8 <HAL_GPIO_Init+0x2a8>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d869      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b7a:	4a94      	ldr	r2, [pc, #592]	@ (8000dcc <HAL_GPIO_Init+0x2ac>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d04c      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b80:	4a92      	ldr	r2, [pc, #584]	@ (8000dcc <HAL_GPIO_Init+0x2ac>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d863      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b86:	4a92      	ldr	r2, [pc, #584]	@ (8000dd0 <HAL_GPIO_Init+0x2b0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d046      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b8c:	4a90      	ldr	r2, [pc, #576]	@ (8000dd0 <HAL_GPIO_Init+0x2b0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d85d      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b92:	2b12      	cmp	r3, #18
 8000b94:	d82a      	bhi.n	8000bec <HAL_GPIO_Init+0xcc>
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d859      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba0 <HAL_GPIO_Init+0x80>)
 8000b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba0:	08000c1b 	.word	0x08000c1b
 8000ba4:	08000bf5 	.word	0x08000bf5
 8000ba8:	08000c07 	.word	0x08000c07
 8000bac:	08000c49 	.word	0x08000c49
 8000bb0:	08000c4f 	.word	0x08000c4f
 8000bb4:	08000c4f 	.word	0x08000c4f
 8000bb8:	08000c4f 	.word	0x08000c4f
 8000bbc:	08000c4f 	.word	0x08000c4f
 8000bc0:	08000c4f 	.word	0x08000c4f
 8000bc4:	08000c4f 	.word	0x08000c4f
 8000bc8:	08000c4f 	.word	0x08000c4f
 8000bcc:	08000c4f 	.word	0x08000c4f
 8000bd0:	08000c4f 	.word	0x08000c4f
 8000bd4:	08000c4f 	.word	0x08000c4f
 8000bd8:	08000c4f 	.word	0x08000c4f
 8000bdc:	08000c4f 	.word	0x08000c4f
 8000be0:	08000c4f 	.word	0x08000c4f
 8000be4:	08000bfd 	.word	0x08000bfd
 8000be8:	08000c11 	.word	0x08000c11
 8000bec:	4a79      	ldr	r2, [pc, #484]	@ (8000dd4 <HAL_GPIO_Init+0x2b4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d013      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf2:	e02c      	b.n	8000c4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e029      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	3304      	adds	r3, #4
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e024      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e01f      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	330c      	adds	r3, #12
 8000c16:	623b      	str	r3, [r7, #32]
          break;
 8000c18:	e01a      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c22:	2304      	movs	r3, #4
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e013      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d105      	bne.n	8000c3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	611a      	str	r2, [r3, #16]
          break;
 8000c3a:	e009      	b.n	8000c50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	615a      	str	r2, [r3, #20]
          break;
 8000c46:	e003      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          break;
 8000c4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	2bff      	cmp	r3, #255	@ 0xff
 8000c54:	d801      	bhi.n	8000c5a <HAL_GPIO_Init+0x13a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	e001      	b.n	8000c5e <HAL_GPIO_Init+0x13e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2bff      	cmp	r3, #255	@ 0xff
 8000c64:	d802      	bhi.n	8000c6c <HAL_GPIO_Init+0x14c>
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x152>
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6e:	3b08      	subs	r3, #8
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	210f      	movs	r1, #15
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	401a      	ands	r2, r3
 8000c84:	6a39      	ldr	r1, [r7, #32]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 80b1 	beq.w	8000e02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb8:	4a48      	ldr	r2, [pc, #288]	@ (8000ddc <HAL_GPIO_Init+0x2bc>)
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a40      	ldr	r2, [pc, #256]	@ (8000de0 <HAL_GPIO_Init+0x2c0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d013      	beq.n	8000d0c <HAL_GPIO_Init+0x1ec>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8000de4 <HAL_GPIO_Init+0x2c4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d00d      	beq.n	8000d08 <HAL_GPIO_Init+0x1e8>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3e      	ldr	r2, [pc, #248]	@ (8000de8 <HAL_GPIO_Init+0x2c8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x1e4>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8000dec <HAL_GPIO_Init+0x2cc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <HAL_GPIO_Init+0x1e0>
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e006      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d00:	2304      	movs	r3, #4
 8000d02:	e004      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d10:	f002 0203 	and.w	r2, r2, #3
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4093      	lsls	r3, r2
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1e:	492f      	ldr	r1, [pc, #188]	@ (8000ddc <HAL_GPIO_Init+0x2bc>)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d006      	beq.n	8000d46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d38:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	492c      	ldr	r1, [pc, #176]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	608b      	str	r3, [r1, #8]
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4928      	ldr	r1, [pc, #160]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	4922      	ldr	r1, [pc, #136]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	491e      	ldr	r1, [pc, #120]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4918      	ldr	r1, [pc, #96]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4914      	ldr	r1, [pc, #80]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d021      	beq.n	8000df4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	490e      	ldr	r1, [pc, #56]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
 8000dbc:	e021      	b.n	8000e02 <HAL_GPIO_Init+0x2e2>
 8000dbe:	bf00      	nop
 8000dc0:	10320000 	.word	0x10320000
 8000dc4:	10310000 	.word	0x10310000
 8000dc8:	10220000 	.word	0x10220000
 8000dcc:	10210000 	.word	0x10210000
 8000dd0:	10120000 	.word	0x10120000
 8000dd4:	10110000 	.word	0x10110000
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40011400 	.word	0x40011400
 8000df0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <HAL_GPIO_Init+0x304>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4909      	ldr	r1, [pc, #36]	@ (8000e24 <HAL_GPIO_Init+0x304>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	3301      	adds	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f47f ae8e 	bne.w	8000b34 <HAL_GPIO_Init+0x14>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	372c      	adds	r7, #44	@ 0x2c
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40010400 	.word	0x40010400

08000e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
 8000e34:	4613      	mov	r3, r2
 8000e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e38:	787b      	ldrb	r3, [r7, #1]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e44:	e003      	b.n	8000e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	041a      	lsls	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	611a      	str	r2, [r3, #16]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	041a      	lsls	r2, r3, #16
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43d9      	mvns	r1, r3
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	400b      	ands	r3, r1
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	611a      	str	r2, [r3, #16]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
	...

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e272      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8087 	beq.w	8000fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eac:	4b92      	ldr	r3, [pc, #584]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb8:	4b8f      	ldr	r3, [pc, #572]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d112      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed0:	d10b      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b89      	ldr	r3, [pc, #548]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d06c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d168      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e24c      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x76>
 8000ef4:	4b80      	ldr	r3, [pc, #512]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a7f      	ldr	r2, [pc, #508]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e02e      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x98>
 8000f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b78      	ldr	r3, [pc, #480]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a77      	ldr	r2, [pc, #476]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e01d      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0xbc>
 8000f2e:	4b72      	ldr	r3, [pc, #456]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a71      	ldr	r2, [pc, #452]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6e      	ldr	r2, [pc, #440]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f48:	4b6b      	ldr	r3, [pc, #428]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a67      	ldr	r2, [pc, #412]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fcc8 	bl	80008fc <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fcc4 	bl	80008fc <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	@ 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e200      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	4b5d      	ldr	r3, [pc, #372]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe4>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fcb4 	bl	80008fc <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fcb0 	bl	80008fc <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	@ 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1ec      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	4b53      	ldr	r3, [pc, #332]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x10c>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d063      	beq.n	800108e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd2:	4b49      	ldr	r3, [pc, #292]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
 8000fde:	4b46      	ldr	r3, [pc, #280]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1c0      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b3d      	ldr	r3, [pc, #244]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4939      	ldr	r1, [pc, #228]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e03a      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <HAL_RCC_OscConfig+0x270>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fc69 	bl	80008fc <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fc65 	bl	80008fc <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1a1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4927      	ldr	r1, [pc, #156]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001062:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <HAL_RCC_OscConfig+0x270>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc48 	bl	80008fc <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fc44 	bl	80008fc <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e180      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d03a      	beq.n	8001110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <HAL_RCC_OscConfig+0x274>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc28 	bl	80008fc <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fc24 	bl	80008fc <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e160      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 face 	bl	8001670 <RCC_Delay>
 80010d4:	e01c      	b.n	8001110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc0e 	bl	80008fc <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e2:	e00f      	b.n	8001104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc0a 	bl	80008fc <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d908      	bls.n	8001104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e146      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	42420000 	.word	0x42420000
 8001100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b92      	ldr	r3, [pc, #584]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e9      	bne.n	80010e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a6 	beq.w	800126a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b8b      	ldr	r3, [pc, #556]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b88      	ldr	r3, [pc, #544]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a87      	ldr	r2, [pc, #540]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b85      	ldr	r3, [pc, #532]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b82      	ldr	r3, [pc, #520]	@ (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b7f      	ldr	r3, [pc, #508]	@ (8001354 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7e      	ldr	r2, [pc, #504]	@ (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fbcb 	bl	80008fc <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fbc7 	bl	80008fc <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	@ 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e103      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b75      	ldr	r3, [pc, #468]	@ (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x312>
 8001190:	4b6f      	ldr	r3, [pc, #444]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a6e      	ldr	r2, [pc, #440]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	e02d      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x334>
 80011a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a69      	ldr	r2, [pc, #420]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b67      	ldr	r3, [pc, #412]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a66      	ldr	r2, [pc, #408]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	e01c      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x356>
 80011c8:	4b61      	ldr	r3, [pc, #388]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a60      	ldr	r2, [pc, #384]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	e00b      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b58      	ldr	r3, [pc, #352]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a57      	ldr	r2, [pc, #348]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb7b 	bl	80008fc <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fb77 	bl	80008fc <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0b1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	4b4b      	ldr	r3, [pc, #300]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ee      	beq.n	800120a <HAL_RCC_OscConfig+0x37e>
 800122c:	e014      	b.n	8001258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb65 	bl	80008fc <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fb61 	bl	80008fc <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e09b      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	4b40      	ldr	r3, [pc, #256]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ee      	bne.n	8001236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d105      	bne.n	800126a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125e:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a3b      	ldr	r2, [pc, #236]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8087 	beq.w	8001382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001274:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d061      	beq.n	8001344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d146      	bne.n	8001316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <HAL_RCC_OscConfig+0x4cc>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fb35 	bl	80008fc <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff fb31 	bl	80008fc <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e06d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4921      	ldr	r1, [pc, #132]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a19      	ldr	r1, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e0:	430b      	orrs	r3, r1
 80012e2:	491b      	ldr	r1, [pc, #108]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_RCC_OscConfig+0x4cc>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb05 	bl	80008fc <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fb01 	bl	80008fc <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e03d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46a>
 8001314:	e035      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <HAL_RCC_OscConfig+0x4cc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff faee 	bl	80008fc <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff faea 	bl	80008fc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e026      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x498>
 8001342:	e01e      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e019      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
 8001358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_OscConfig+0x500>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	429a      	cmp	r2, r3
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0d0      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d910      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b67      	ldr	r3, [pc, #412]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 0207 	bic.w	r2, r3, #7
 80013ba:	4965      	ldr	r1, [pc, #404]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a58      	ldr	r2, [pc, #352]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a52      	ldr	r2, [pc, #328]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800140e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d115      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e073      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3d      	ldr	r3, [pc, #244]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06b      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4936      	ldr	r1, [pc, #216]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fa3c 	bl	80008fc <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff fa38 	bl	80008fc <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e053      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4922      	ldr	r1, [pc, #136]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4602      	mov	r2, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	490a      	ldr	r1, [pc, #40]	@ (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <HAL_RCC_ClockConfig+0x1cc>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <HAL_RCC_ClockConfig+0x1d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f99a 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	08002f2c 	.word	0x08002f2c
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157e:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x30>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x36>
 8001592:	e027      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001596:	613b      	str	r3, [r7, #16]
      break;
 8001598:	e027      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a17      	ldr	r2, [pc, #92]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d010      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	0c5b      	lsrs	r3, r3, #17
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015c6:	fb03 f202 	mul.w	r2, r3, r2
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e004      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	613b      	str	r3, [r7, #16]
      break;
 80015e2:	e002      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015e6:	613b      	str	r3, [r7, #16]
      break;
 80015e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ea:	693b      	ldr	r3, [r7, #16]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	08002f44 	.word	0x08002f44
 8001604:	08002f54 	.word	0x08002f54
 8001608:	003d0900 	.word	0x003d0900

0800160c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001610:	4b02      	ldr	r3, [pc, #8]	@ (800161c <HAL_RCC_GetHCLKFreq+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001624:	f7ff fff2 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	4903      	ldr	r1, [pc, #12]	@ (8001644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	08002f3c 	.word	0x08002f3c

08001648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800164c:	f7ff ffde 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0adb      	lsrs	r3, r3, #11
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4903      	ldr	r1, [pc, #12]	@ (800166c <HAL_RCC_GetPCLK2Freq+0x24>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	08002f3c 	.word	0x08002f3c

08001670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <RCC_Delay+0x34>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <RCC_Delay+0x38>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0a5b      	lsrs	r3, r3, #9
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800168c:	bf00      	nop
  }
  while (Delay --);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	60fa      	str	r2, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f9      	bne.n	800168c <RCC_Delay+0x1c>
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000000 	.word	0x20000000
 80016a8:	10624dd3 	.word	0x10624dd3

080016ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e076      	b.n	80017ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d108      	bne.n	80016d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80016ce:	d009      	beq.n	80016e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
 80016d6:	e005      	b.n	80016e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe ff24 	bl	800054c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800171a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001768:	ea42 0103 	orr.w	r1, r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	0c1a      	lsrs	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f002 0204 	and.w	r2, r2, #4
 800178a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800179a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_SPI_Transmit+0x22>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e12d      	b.n	8001a32 <HAL_SPI_Transmit+0x27e>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017de:	f7ff f88d 	bl	80008fc <HAL_GetTick>
 80017e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d002      	beq.n	80017fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
 80017f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017f8:	e116      	b.n	8001a28 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_SPI_Transmit+0x52>
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800180a:	e10d      	b.n	8001a28 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2203      	movs	r2, #3
 8001810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	88fa      	ldrh	r2, [r7, #6]
 8001824:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001852:	d10f      	bne.n	8001874 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001862:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001872:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800187e:	2b40      	cmp	r3, #64	@ 0x40
 8001880:	d007      	beq.n	8001892 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800189a:	d14f      	bne.n	800193c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_SPI_Transmit+0xf6>
 80018a4:	8afb      	ldrh	r3, [r7, #22]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d142      	bne.n	8001930 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	881a      	ldrh	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	1c9a      	adds	r2, r3, #2
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80018ce:	e02f      	b.n	8001930 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d112      	bne.n	8001904 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	1c9a      	adds	r2, r3, #2
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001902:	e015      	b.n	8001930 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001904:	f7fe fffa 	bl	80008fc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d803      	bhi.n	800191c <HAL_SPI_Transmit+0x168>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191a:	d102      	bne.n	8001922 <HAL_SPI_Transmit+0x16e>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800192e:	e07b      	b.n	8001a28 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001934:	b29b      	uxth	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ca      	bne.n	80018d0 <HAL_SPI_Transmit+0x11c>
 800193a:	e050      	b.n	80019de <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <HAL_SPI_Transmit+0x196>
 8001944:	8afb      	ldrh	r3, [r7, #22]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d144      	bne.n	80019d4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	330c      	adds	r3, #12
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001970:	e030      	b.n	80019d4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b02      	cmp	r3, #2
 800197e:	d113      	bne.n	80019a8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	330c      	adds	r3, #12
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80019a6:	e015      	b.n	80019d4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019a8:	f7fe ffa8 	bl	80008fc <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d803      	bhi.n	80019c0 <HAL_SPI_Transmit+0x20c>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019be:	d102      	bne.n	80019c6 <HAL_SPI_Transmit+0x212>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80019d2:	e029      	b.n	8001a28 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1c9      	bne.n	8001972 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 fbcc 	bl	8002180 <SPI_EndRxTxTransaction>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2220      	movs	r2, #32
 80019f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	77fb      	strb	r3, [r7, #31]
 8001a1e:	e003      	b.n	8001a28 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b088      	sub	sp, #32
 8001a3e:	af02      	add	r7, sp, #8
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a5e:	e0fb      	b.n	8001c58 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a68:	d112      	bne.n	8001a90 <HAL_SPI_Receive+0x56>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10e      	bne.n	8001a90 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2204      	movs	r2, #4
 8001a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f8ef 	bl	8001c6a <HAL_SPI_TransmitReceive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	e0e8      	b.n	8001c62 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_SPI_Receive+0x64>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0e1      	b.n	8001c62 <HAL_SPI_Receive+0x228>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aa6:	f7fe ff29 	bl	80008fc <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <HAL_SPI_Receive+0x7e>
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001abc:	e0cc      	b.n	8001c58 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b04:	d10f      	bne.n	8001b26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b30:	2b40      	cmp	r3, #64	@ 0x40
 8001b32:	d007      	beq.n	8001b44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d16a      	bne.n	8001c22 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001b4c:	e032      	b.n	8001bb4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d115      	bne.n	8001b88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f103 020c 	add.w	r2, r3, #12
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b86:	e015      	b.n	8001bb4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b88:	f7fe feb8 	bl	80008fc <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d803      	bhi.n	8001ba0 <HAL_SPI_Receive+0x166>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9e:	d102      	bne.n	8001ba6 <HAL_SPI_Receive+0x16c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001bb2:	e051      	b.n	8001c58 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1c7      	bne.n	8001b4e <HAL_SPI_Receive+0x114>
 8001bbe:	e035      	b.n	8001c2c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d113      	bne.n	8001bf6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be0:	1c9a      	adds	r2, r3, #2
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001bf4:	e015      	b.n	8001c22 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bf6:	f7fe fe81 	bl	80008fc <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d803      	bhi.n	8001c0e <HAL_SPI_Receive+0x1d4>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d102      	bne.n	8001c14 <HAL_SPI_Receive+0x1da>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d106      	bne.n	8001c22 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001c20:	e01a      	b.n	8001c58 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1c9      	bne.n	8001bc0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 fa53 	bl	80020dc <SPI_EndRxTransaction>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
 8001c4e:	e003      	b.n	8001c58 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b08c      	sub	sp, #48	@ 0x30
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_SPI_TransmitReceive+0x26>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e198      	b.n	8001fc2 <HAL_SPI_TransmitReceive+0x358>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c98:	f7fe fe30 	bl	80008fc <HAL_GetTick>
 8001c9c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d00f      	beq.n	8001cda <HAL_SPI_TransmitReceive+0x70>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cc0:	d107      	bne.n	8001cd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <HAL_SPI_TransmitReceive+0x68>
 8001cca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d003      	beq.n	8001cda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001cd8:	e16d      	b.n	8001fb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_SPI_TransmitReceive+0x82>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_SPI_TransmitReceive+0x82>
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001cf2:	e160      	b.n	8001fb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d003      	beq.n	8001d08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2205      	movs	r2, #5
 8001d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	887a      	ldrh	r2, [r7, #2]
 8001d2a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d48:	2b40      	cmp	r3, #64	@ 0x40
 8001d4a:	d007      	beq.n	8001d5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d64:	d17c      	bne.n	8001e60 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_SPI_TransmitReceive+0x10a>
 8001d6e:	8b7b      	ldrh	r3, [r7, #26]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d16a      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	1c9a      	adds	r2, r3, #2
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d98:	e057      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d11b      	bne.n	8001de0 <HAL_SPI_TransmitReceive+0x176>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <HAL_SPI_TransmitReceive+0x176>
 8001db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d113      	bne.n	8001de0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	1c9a      	adds	r2, r3, #2
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d119      	bne.n	8001e22 <HAL_SPI_TransmitReceive+0x1b8>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d014      	beq.n	8001e22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e02:	b292      	uxth	r2, r2
 8001e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0a:	1c9a      	adds	r2, r3, #2
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e22:	f7fe fd6b 	bl	80008fc <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d80b      	bhi.n	8001e4a <HAL_SPI_TransmitReceive+0x1e0>
 8001e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d007      	beq.n	8001e4a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001e48:	e0b5      	b.n	8001fb6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1a2      	bne.n	8001d9a <HAL_SPI_TransmitReceive+0x130>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d19d      	bne.n	8001d9a <HAL_SPI_TransmitReceive+0x130>
 8001e5e:	e080      	b.n	8001f62 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_SPI_TransmitReceive+0x204>
 8001e68:	8b7b      	ldrh	r3, [r7, #26]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d16f      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	330c      	adds	r3, #12
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e94:	e05b      	b.n	8001f4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d11c      	bne.n	8001ede <HAL_SPI_TransmitReceive+0x274>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d017      	beq.n	8001ede <HAL_SPI_TransmitReceive+0x274>
 8001eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d114      	bne.n	8001ede <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d119      	bne.n	8001f20 <HAL_SPI_TransmitReceive+0x2b6>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d014      	beq.n	8001f20 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f20:	f7fe fcec 	bl	80008fc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d803      	bhi.n	8001f38 <HAL_SPI_TransmitReceive+0x2ce>
 8001f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d102      	bne.n	8001f3e <HAL_SPI_TransmitReceive+0x2d4>
 8001f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d107      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001f4c:	e033      	b.n	8001fb6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d19e      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x22c>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d199      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f90a 	bl	8002180 <SPI_EndRxTxTransaction>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8001f7e:	e01a      	b.n	8001fb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10a      	bne.n	8001f9e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001fac:	e003      	b.n	8001fb6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3730      	adds	r7, #48	@ 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fdc:	f7fe fc8e 	bl	80008fc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fec:	f7fe fc86 	bl	80008fc <HAL_GetTick>
 8001ff0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	015b      	lsls	r3, r3, #5
 8001ff8:	0d1b      	lsrs	r3, r3, #20
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002002:	e054      	b.n	80020ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d050      	beq.n	80020ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800200c:	f7fe fc76 	bl	80008fc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	429a      	cmp	r2, r3
 800201a:	d902      	bls.n	8002022 <SPI_WaitFlagStateUntilTimeout+0x56>
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d13d      	bne.n	800209e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002030:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800203a:	d111      	bne.n	8002060 <SPI_WaitFlagStateUntilTimeout+0x94>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002044:	d004      	beq.n	8002050 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204e:	d107      	bne.n	8002060 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800205e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002068:	d10f      	bne.n	800208a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002088:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e017      	b.n	80020ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4013      	ands	r3, r2
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	bf0c      	ite	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	2300      	movne	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d19b      	bne.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020f0:	d111      	bne.n	8002116 <SPI_EndRxTransaction+0x3a>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020fa:	d004      	beq.n	8002106 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002104:	d107      	bne.n	8002116 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002114:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800211e:	d117      	bne.n	8002150 <SPI_EndRxTransaction+0x74>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002128:	d112      	bne.n	8002150 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	2101      	movs	r1, #1
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff ff49 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01a      	beq.n	8002176 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002144:	f043 0220 	orr.w	r2, r3, #32
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e013      	b.n	8002178 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff ff36 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e000      	b.n	8002178 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff ff18 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	f043 0220 	orr.w	r2, r3, #32
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e000      	b.n	80021b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e042      	b.n	8002254 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fac0 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	@ 0x24
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f91d 	bl	8002440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	@ 0x28
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b20      	cmp	r3, #32
 800227a:	d16d      	bne.n	8002358 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_UART_Transmit+0x2c>
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e066      	b.n	800235a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2221      	movs	r2, #33	@ 0x21
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800229a:	f7fe fb2f 	bl	80008fc <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b4:	d108      	bne.n	80022c8 <HAL_UART_Transmit+0x6c>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	e003      	b.n	80022d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022d0:	e02a      	b.n	8002328 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2200      	movs	r2, #0
 80022da:	2180      	movs	r1, #128	@ 0x80
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f840 	bl	8002362 <UART_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e036      	b.n	800235a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002300:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	3302      	adds	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	e007      	b.n	800231a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	3301      	adds	r3, #1
 8002318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1cf      	bne.n	80022d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	2140      	movs	r1, #64	@ 0x40
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f810 	bl	8002362 <UART_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e006      	b.n	800235a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002358:	2302      	movs	r3, #2
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b090      	sub	sp, #64	@ 0x40
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002372:	e050      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d04c      	beq.n	8002416 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800237c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <UART_WaitOnFlagUntilTimeout+0x30>
 8002382:	f7fe fabb 	bl	80008fc <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800238e:	429a      	cmp	r2, r3
 8002390:	d241      	bcs.n	8002416 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	330c      	adds	r3, #12
 8002398:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239c:	e853 3f00 	ldrex	r3, [r3]
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80023a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	330c      	adds	r3, #12
 80023b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023ba:	e841 2300 	strex	r3, r2, [r1]
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e5      	bne.n	8002392 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3314      	adds	r3, #20
 80023cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	613b      	str	r3, [r7, #16]
   return(result);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3314      	adds	r3, #20
 80023e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023e6:	623a      	str	r2, [r7, #32]
 80023e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ea:	69f9      	ldr	r1, [r7, #28]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	e841 2300 	strex	r3, r2, [r1]
 80023f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e5      	bne.n	80023c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e00f      	b.n	8002436 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4013      	ands	r3, r2
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	429a      	cmp	r2, r3
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	429a      	cmp	r2, r3
 8002432:	d09f      	beq.n	8002374 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3740      	adds	r7, #64	@ 0x40
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800247a:	f023 030c 	bic.w	r3, r3, #12
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	430b      	orrs	r3, r1
 8002486:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002554 <UART_SetConfig+0x114>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d103      	bne.n	80024b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024a8:	f7ff f8ce 	bl	8001648 <HAL_RCC_GetPCLK2Freq>
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	e002      	b.n	80024b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024b0:	f7ff f8b6 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009a      	lsls	r2, r3, #2
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	4a22      	ldr	r2, [pc, #136]	@ (8002558 <UART_SetConfig+0x118>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	0119      	lsls	r1, r3, #4
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009a      	lsls	r2, r3, #2
 80024e0:	441a      	add	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <UART_SetConfig+0x118>)
 80024ee:	fba3 0302 	umull	r0, r3, r3, r2
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2064      	movs	r0, #100	@ 0x64
 80024f6:	fb00 f303 	mul.w	r3, r0, r3
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	3332      	adds	r3, #50	@ 0x32
 8002500:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <UART_SetConfig+0x118>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800250c:	4419      	add	r1, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009a      	lsls	r2, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fbb2 f2f3 	udiv	r2, r2, r3
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <UART_SetConfig+0x118>)
 8002526:	fba3 0302 	umull	r0, r3, r3, r2
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2064      	movs	r0, #100	@ 0x64
 800252e:	fb00 f303 	mul.w	r3, r0, r3
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	3332      	adds	r3, #50	@ 0x32
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <UART_SetConfig+0x118>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	f003 020f 	and.w	r2, r3, #15
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	440a      	add	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40013800 	.word	0x40013800
 8002558:	51eb851f 	.word	0x51eb851f

0800255c <siprintf>:
 800255c:	b40e      	push	{r1, r2, r3}
 800255e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002562:	b500      	push	{lr}
 8002564:	b09c      	sub	sp, #112	@ 0x70
 8002566:	ab1d      	add	r3, sp, #116	@ 0x74
 8002568:	9002      	str	r0, [sp, #8]
 800256a:	9006      	str	r0, [sp, #24]
 800256c:	9107      	str	r1, [sp, #28]
 800256e:	9104      	str	r1, [sp, #16]
 8002570:	4808      	ldr	r0, [pc, #32]	@ (8002594 <siprintf+0x38>)
 8002572:	4909      	ldr	r1, [pc, #36]	@ (8002598 <siprintf+0x3c>)
 8002574:	f853 2b04 	ldr.w	r2, [r3], #4
 8002578:	9105      	str	r1, [sp, #20]
 800257a:	6800      	ldr	r0, [r0, #0]
 800257c:	a902      	add	r1, sp, #8
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	f000 f992 	bl	80028a8 <_svfiprintf_r>
 8002584:	2200      	movs	r2, #0
 8002586:	9b02      	ldr	r3, [sp, #8]
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	b01c      	add	sp, #112	@ 0x70
 800258c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002590:	b003      	add	sp, #12
 8002592:	4770      	bx	lr
 8002594:	2000000c 	.word	0x2000000c
 8002598:	ffff0208 	.word	0xffff0208

0800259c <memset>:
 800259c:	4603      	mov	r3, r0
 800259e:	4402      	add	r2, r0
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d100      	bne.n	80025a6 <memset+0xa>
 80025a4:	4770      	bx	lr
 80025a6:	f803 1b01 	strb.w	r1, [r3], #1
 80025aa:	e7f9      	b.n	80025a0 <memset+0x4>

080025ac <__errno>:
 80025ac:	4b01      	ldr	r3, [pc, #4]	@ (80025b4 <__errno+0x8>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000000c 	.word	0x2000000c

080025b8 <__libc_init_array>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	2600      	movs	r6, #0
 80025bc:	4d0c      	ldr	r5, [pc, #48]	@ (80025f0 <__libc_init_array+0x38>)
 80025be:	4c0d      	ldr	r4, [pc, #52]	@ (80025f4 <__libc_init_array+0x3c>)
 80025c0:	1b64      	subs	r4, r4, r5
 80025c2:	10a4      	asrs	r4, r4, #2
 80025c4:	42a6      	cmp	r6, r4
 80025c6:	d109      	bne.n	80025dc <__libc_init_array+0x24>
 80025c8:	f000 fc78 	bl	8002ebc <_init>
 80025cc:	2600      	movs	r6, #0
 80025ce:	4d0a      	ldr	r5, [pc, #40]	@ (80025f8 <__libc_init_array+0x40>)
 80025d0:	4c0a      	ldr	r4, [pc, #40]	@ (80025fc <__libc_init_array+0x44>)
 80025d2:	1b64      	subs	r4, r4, r5
 80025d4:	10a4      	asrs	r4, r4, #2
 80025d6:	42a6      	cmp	r6, r4
 80025d8:	d105      	bne.n	80025e6 <__libc_init_array+0x2e>
 80025da:	bd70      	pop	{r4, r5, r6, pc}
 80025dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e0:	4798      	blx	r3
 80025e2:	3601      	adds	r6, #1
 80025e4:	e7ee      	b.n	80025c4 <__libc_init_array+0xc>
 80025e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ea:	4798      	blx	r3
 80025ec:	3601      	adds	r6, #1
 80025ee:	e7f2      	b.n	80025d6 <__libc_init_array+0x1e>
 80025f0:	08002f8c 	.word	0x08002f8c
 80025f4:	08002f8c 	.word	0x08002f8c
 80025f8:	08002f8c 	.word	0x08002f8c
 80025fc:	08002f90 	.word	0x08002f90

08002600 <__retarget_lock_acquire_recursive>:
 8002600:	4770      	bx	lr

08002602 <__retarget_lock_release_recursive>:
 8002602:	4770      	bx	lr

08002604 <_free_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4605      	mov	r5, r0
 8002608:	2900      	cmp	r1, #0
 800260a:	d040      	beq.n	800268e <_free_r+0x8a>
 800260c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002610:	1f0c      	subs	r4, r1, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	bfb8      	it	lt
 8002616:	18e4      	addlt	r4, r4, r3
 8002618:	f000 f8de 	bl	80027d8 <__malloc_lock>
 800261c:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <_free_r+0x8c>)
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	b933      	cbnz	r3, 8002630 <_free_r+0x2c>
 8002622:	6063      	str	r3, [r4, #4]
 8002624:	6014      	str	r4, [r2, #0]
 8002626:	4628      	mov	r0, r5
 8002628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800262c:	f000 b8da 	b.w	80027e4 <__malloc_unlock>
 8002630:	42a3      	cmp	r3, r4
 8002632:	d908      	bls.n	8002646 <_free_r+0x42>
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	1821      	adds	r1, r4, r0
 8002638:	428b      	cmp	r3, r1
 800263a:	bf01      	itttt	eq
 800263c:	6819      	ldreq	r1, [r3, #0]
 800263e:	685b      	ldreq	r3, [r3, #4]
 8002640:	1809      	addeq	r1, r1, r0
 8002642:	6021      	streq	r1, [r4, #0]
 8002644:	e7ed      	b.n	8002622 <_free_r+0x1e>
 8002646:	461a      	mov	r2, r3
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	b10b      	cbz	r3, 8002650 <_free_r+0x4c>
 800264c:	42a3      	cmp	r3, r4
 800264e:	d9fa      	bls.n	8002646 <_free_r+0x42>
 8002650:	6811      	ldr	r1, [r2, #0]
 8002652:	1850      	adds	r0, r2, r1
 8002654:	42a0      	cmp	r0, r4
 8002656:	d10b      	bne.n	8002670 <_free_r+0x6c>
 8002658:	6820      	ldr	r0, [r4, #0]
 800265a:	4401      	add	r1, r0
 800265c:	1850      	adds	r0, r2, r1
 800265e:	4283      	cmp	r3, r0
 8002660:	6011      	str	r1, [r2, #0]
 8002662:	d1e0      	bne.n	8002626 <_free_r+0x22>
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4408      	add	r0, r1
 800266a:	6010      	str	r0, [r2, #0]
 800266c:	6053      	str	r3, [r2, #4]
 800266e:	e7da      	b.n	8002626 <_free_r+0x22>
 8002670:	d902      	bls.n	8002678 <_free_r+0x74>
 8002672:	230c      	movs	r3, #12
 8002674:	602b      	str	r3, [r5, #0]
 8002676:	e7d6      	b.n	8002626 <_free_r+0x22>
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	1821      	adds	r1, r4, r0
 800267c:	428b      	cmp	r3, r1
 800267e:	bf01      	itttt	eq
 8002680:	6819      	ldreq	r1, [r3, #0]
 8002682:	685b      	ldreq	r3, [r3, #4]
 8002684:	1809      	addeq	r1, r1, r0
 8002686:	6021      	streq	r1, [r4, #0]
 8002688:	6063      	str	r3, [r4, #4]
 800268a:	6054      	str	r4, [r2, #4]
 800268c:	e7cb      	b.n	8002626 <_free_r+0x22>
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	20000264 	.word	0x20000264

08002694 <sbrk_aligned>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4e0f      	ldr	r6, [pc, #60]	@ (80026d4 <sbrk_aligned+0x40>)
 8002698:	460c      	mov	r4, r1
 800269a:	6831      	ldr	r1, [r6, #0]
 800269c:	4605      	mov	r5, r0
 800269e:	b911      	cbnz	r1, 80026a6 <sbrk_aligned+0x12>
 80026a0:	f000 fbaa 	bl	8002df8 <_sbrk_r>
 80026a4:	6030      	str	r0, [r6, #0]
 80026a6:	4621      	mov	r1, r4
 80026a8:	4628      	mov	r0, r5
 80026aa:	f000 fba5 	bl	8002df8 <_sbrk_r>
 80026ae:	1c43      	adds	r3, r0, #1
 80026b0:	d103      	bne.n	80026ba <sbrk_aligned+0x26>
 80026b2:	f04f 34ff 	mov.w	r4, #4294967295
 80026b6:	4620      	mov	r0, r4
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	1cc4      	adds	r4, r0, #3
 80026bc:	f024 0403 	bic.w	r4, r4, #3
 80026c0:	42a0      	cmp	r0, r4
 80026c2:	d0f8      	beq.n	80026b6 <sbrk_aligned+0x22>
 80026c4:	1a21      	subs	r1, r4, r0
 80026c6:	4628      	mov	r0, r5
 80026c8:	f000 fb96 	bl	8002df8 <_sbrk_r>
 80026cc:	3001      	adds	r0, #1
 80026ce:	d1f2      	bne.n	80026b6 <sbrk_aligned+0x22>
 80026d0:	e7ef      	b.n	80026b2 <sbrk_aligned+0x1e>
 80026d2:	bf00      	nop
 80026d4:	20000260 	.word	0x20000260

080026d8 <_malloc_r>:
 80026d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026dc:	1ccd      	adds	r5, r1, #3
 80026de:	f025 0503 	bic.w	r5, r5, #3
 80026e2:	3508      	adds	r5, #8
 80026e4:	2d0c      	cmp	r5, #12
 80026e6:	bf38      	it	cc
 80026e8:	250c      	movcc	r5, #12
 80026ea:	2d00      	cmp	r5, #0
 80026ec:	4606      	mov	r6, r0
 80026ee:	db01      	blt.n	80026f4 <_malloc_r+0x1c>
 80026f0:	42a9      	cmp	r1, r5
 80026f2:	d904      	bls.n	80026fe <_malloc_r+0x26>
 80026f4:	230c      	movs	r3, #12
 80026f6:	6033      	str	r3, [r6, #0]
 80026f8:	2000      	movs	r0, #0
 80026fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80027d4 <_malloc_r+0xfc>
 8002702:	f000 f869 	bl	80027d8 <__malloc_lock>
 8002706:	f8d8 3000 	ldr.w	r3, [r8]
 800270a:	461c      	mov	r4, r3
 800270c:	bb44      	cbnz	r4, 8002760 <_malloc_r+0x88>
 800270e:	4629      	mov	r1, r5
 8002710:	4630      	mov	r0, r6
 8002712:	f7ff ffbf 	bl	8002694 <sbrk_aligned>
 8002716:	1c43      	adds	r3, r0, #1
 8002718:	4604      	mov	r4, r0
 800271a:	d158      	bne.n	80027ce <_malloc_r+0xf6>
 800271c:	f8d8 4000 	ldr.w	r4, [r8]
 8002720:	4627      	mov	r7, r4
 8002722:	2f00      	cmp	r7, #0
 8002724:	d143      	bne.n	80027ae <_malloc_r+0xd6>
 8002726:	2c00      	cmp	r4, #0
 8002728:	d04b      	beq.n	80027c2 <_malloc_r+0xea>
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	4639      	mov	r1, r7
 800272e:	4630      	mov	r0, r6
 8002730:	eb04 0903 	add.w	r9, r4, r3
 8002734:	f000 fb60 	bl	8002df8 <_sbrk_r>
 8002738:	4581      	cmp	r9, r0
 800273a:	d142      	bne.n	80027c2 <_malloc_r+0xea>
 800273c:	6821      	ldr	r1, [r4, #0]
 800273e:	4630      	mov	r0, r6
 8002740:	1a6d      	subs	r5, r5, r1
 8002742:	4629      	mov	r1, r5
 8002744:	f7ff ffa6 	bl	8002694 <sbrk_aligned>
 8002748:	3001      	adds	r0, #1
 800274a:	d03a      	beq.n	80027c2 <_malloc_r+0xea>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	442b      	add	r3, r5
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	f8d8 3000 	ldr.w	r3, [r8]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	bb62      	cbnz	r2, 80027b4 <_malloc_r+0xdc>
 800275a:	f8c8 7000 	str.w	r7, [r8]
 800275e:	e00f      	b.n	8002780 <_malloc_r+0xa8>
 8002760:	6822      	ldr	r2, [r4, #0]
 8002762:	1b52      	subs	r2, r2, r5
 8002764:	d420      	bmi.n	80027a8 <_malloc_r+0xd0>
 8002766:	2a0b      	cmp	r2, #11
 8002768:	d917      	bls.n	800279a <_malloc_r+0xc2>
 800276a:	1961      	adds	r1, r4, r5
 800276c:	42a3      	cmp	r3, r4
 800276e:	6025      	str	r5, [r4, #0]
 8002770:	bf18      	it	ne
 8002772:	6059      	strne	r1, [r3, #4]
 8002774:	6863      	ldr	r3, [r4, #4]
 8002776:	bf08      	it	eq
 8002778:	f8c8 1000 	streq.w	r1, [r8]
 800277c:	5162      	str	r2, [r4, r5]
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	4630      	mov	r0, r6
 8002782:	f000 f82f 	bl	80027e4 <__malloc_unlock>
 8002786:	f104 000b 	add.w	r0, r4, #11
 800278a:	1d23      	adds	r3, r4, #4
 800278c:	f020 0007 	bic.w	r0, r0, #7
 8002790:	1ac2      	subs	r2, r0, r3
 8002792:	bf1c      	itt	ne
 8002794:	1a1b      	subne	r3, r3, r0
 8002796:	50a3      	strne	r3, [r4, r2]
 8002798:	e7af      	b.n	80026fa <_malloc_r+0x22>
 800279a:	6862      	ldr	r2, [r4, #4]
 800279c:	42a3      	cmp	r3, r4
 800279e:	bf0c      	ite	eq
 80027a0:	f8c8 2000 	streq.w	r2, [r8]
 80027a4:	605a      	strne	r2, [r3, #4]
 80027a6:	e7eb      	b.n	8002780 <_malloc_r+0xa8>
 80027a8:	4623      	mov	r3, r4
 80027aa:	6864      	ldr	r4, [r4, #4]
 80027ac:	e7ae      	b.n	800270c <_malloc_r+0x34>
 80027ae:	463c      	mov	r4, r7
 80027b0:	687f      	ldr	r7, [r7, #4]
 80027b2:	e7b6      	b.n	8002722 <_malloc_r+0x4a>
 80027b4:	461a      	mov	r2, r3
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	42a3      	cmp	r3, r4
 80027ba:	d1fb      	bne.n	80027b4 <_malloc_r+0xdc>
 80027bc:	2300      	movs	r3, #0
 80027be:	6053      	str	r3, [r2, #4]
 80027c0:	e7de      	b.n	8002780 <_malloc_r+0xa8>
 80027c2:	230c      	movs	r3, #12
 80027c4:	4630      	mov	r0, r6
 80027c6:	6033      	str	r3, [r6, #0]
 80027c8:	f000 f80c 	bl	80027e4 <__malloc_unlock>
 80027cc:	e794      	b.n	80026f8 <_malloc_r+0x20>
 80027ce:	6005      	str	r5, [r0, #0]
 80027d0:	e7d6      	b.n	8002780 <_malloc_r+0xa8>
 80027d2:	bf00      	nop
 80027d4:	20000264 	.word	0x20000264

080027d8 <__malloc_lock>:
 80027d8:	4801      	ldr	r0, [pc, #4]	@ (80027e0 <__malloc_lock+0x8>)
 80027da:	f7ff bf11 	b.w	8002600 <__retarget_lock_acquire_recursive>
 80027de:	bf00      	nop
 80027e0:	2000025c 	.word	0x2000025c

080027e4 <__malloc_unlock>:
 80027e4:	4801      	ldr	r0, [pc, #4]	@ (80027ec <__malloc_unlock+0x8>)
 80027e6:	f7ff bf0c 	b.w	8002602 <__retarget_lock_release_recursive>
 80027ea:	bf00      	nop
 80027ec:	2000025c 	.word	0x2000025c

080027f0 <__ssputs_r>:
 80027f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f4:	461f      	mov	r7, r3
 80027f6:	688e      	ldr	r6, [r1, #8]
 80027f8:	4682      	mov	sl, r0
 80027fa:	42be      	cmp	r6, r7
 80027fc:	460c      	mov	r4, r1
 80027fe:	4690      	mov	r8, r2
 8002800:	680b      	ldr	r3, [r1, #0]
 8002802:	d82d      	bhi.n	8002860 <__ssputs_r+0x70>
 8002804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002808:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800280c:	d026      	beq.n	800285c <__ssputs_r+0x6c>
 800280e:	6965      	ldr	r5, [r4, #20]
 8002810:	6909      	ldr	r1, [r1, #16]
 8002812:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002816:	eba3 0901 	sub.w	r9, r3, r1
 800281a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	444b      	add	r3, r9
 8002822:	106d      	asrs	r5, r5, #1
 8002824:	429d      	cmp	r5, r3
 8002826:	bf38      	it	cc
 8002828:	461d      	movcc	r5, r3
 800282a:	0553      	lsls	r3, r2, #21
 800282c:	d527      	bpl.n	800287e <__ssputs_r+0x8e>
 800282e:	4629      	mov	r1, r5
 8002830:	f7ff ff52 	bl	80026d8 <_malloc_r>
 8002834:	4606      	mov	r6, r0
 8002836:	b360      	cbz	r0, 8002892 <__ssputs_r+0xa2>
 8002838:	464a      	mov	r2, r9
 800283a:	6921      	ldr	r1, [r4, #16]
 800283c:	f000 fafa 	bl	8002e34 <memcpy>
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800284a:	81a3      	strh	r3, [r4, #12]
 800284c:	6126      	str	r6, [r4, #16]
 800284e:	444e      	add	r6, r9
 8002850:	6026      	str	r6, [r4, #0]
 8002852:	463e      	mov	r6, r7
 8002854:	6165      	str	r5, [r4, #20]
 8002856:	eba5 0509 	sub.w	r5, r5, r9
 800285a:	60a5      	str	r5, [r4, #8]
 800285c:	42be      	cmp	r6, r7
 800285e:	d900      	bls.n	8002862 <__ssputs_r+0x72>
 8002860:	463e      	mov	r6, r7
 8002862:	4632      	mov	r2, r6
 8002864:	4641      	mov	r1, r8
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	f000 faac 	bl	8002dc4 <memmove>
 800286c:	2000      	movs	r0, #0
 800286e:	68a3      	ldr	r3, [r4, #8]
 8002870:	1b9b      	subs	r3, r3, r6
 8002872:	60a3      	str	r3, [r4, #8]
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	4433      	add	r3, r6
 8002878:	6023      	str	r3, [r4, #0]
 800287a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800287e:	462a      	mov	r2, r5
 8002880:	f000 fae6 	bl	8002e50 <_realloc_r>
 8002884:	4606      	mov	r6, r0
 8002886:	2800      	cmp	r0, #0
 8002888:	d1e0      	bne.n	800284c <__ssputs_r+0x5c>
 800288a:	4650      	mov	r0, sl
 800288c:	6921      	ldr	r1, [r4, #16]
 800288e:	f7ff feb9 	bl	8002604 <_free_r>
 8002892:	230c      	movs	r3, #12
 8002894:	f8ca 3000 	str.w	r3, [sl]
 8002898:	89a3      	ldrh	r3, [r4, #12]
 800289a:	f04f 30ff 	mov.w	r0, #4294967295
 800289e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028a2:	81a3      	strh	r3, [r4, #12]
 80028a4:	e7e9      	b.n	800287a <__ssputs_r+0x8a>
	...

080028a8 <_svfiprintf_r>:
 80028a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ac:	4698      	mov	r8, r3
 80028ae:	898b      	ldrh	r3, [r1, #12]
 80028b0:	4607      	mov	r7, r0
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	460d      	mov	r5, r1
 80028b6:	4614      	mov	r4, r2
 80028b8:	b09d      	sub	sp, #116	@ 0x74
 80028ba:	d510      	bpl.n	80028de <_svfiprintf_r+0x36>
 80028bc:	690b      	ldr	r3, [r1, #16]
 80028be:	b973      	cbnz	r3, 80028de <_svfiprintf_r+0x36>
 80028c0:	2140      	movs	r1, #64	@ 0x40
 80028c2:	f7ff ff09 	bl	80026d8 <_malloc_r>
 80028c6:	6028      	str	r0, [r5, #0]
 80028c8:	6128      	str	r0, [r5, #16]
 80028ca:	b930      	cbnz	r0, 80028da <_svfiprintf_r+0x32>
 80028cc:	230c      	movs	r3, #12
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	b01d      	add	sp, #116	@ 0x74
 80028d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028da:	2340      	movs	r3, #64	@ 0x40
 80028dc:	616b      	str	r3, [r5, #20]
 80028de:	2300      	movs	r3, #0
 80028e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80028e2:	2320      	movs	r3, #32
 80028e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80028e8:	2330      	movs	r3, #48	@ 0x30
 80028ea:	f04f 0901 	mov.w	r9, #1
 80028ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80028f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002a8c <_svfiprintf_r+0x1e4>
 80028f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80028fa:	4623      	mov	r3, r4
 80028fc:	469a      	mov	sl, r3
 80028fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002902:	b10a      	cbz	r2, 8002908 <_svfiprintf_r+0x60>
 8002904:	2a25      	cmp	r2, #37	@ 0x25
 8002906:	d1f9      	bne.n	80028fc <_svfiprintf_r+0x54>
 8002908:	ebba 0b04 	subs.w	fp, sl, r4
 800290c:	d00b      	beq.n	8002926 <_svfiprintf_r+0x7e>
 800290e:	465b      	mov	r3, fp
 8002910:	4622      	mov	r2, r4
 8002912:	4629      	mov	r1, r5
 8002914:	4638      	mov	r0, r7
 8002916:	f7ff ff6b 	bl	80027f0 <__ssputs_r>
 800291a:	3001      	adds	r0, #1
 800291c:	f000 80a7 	beq.w	8002a6e <_svfiprintf_r+0x1c6>
 8002920:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002922:	445a      	add	r2, fp
 8002924:	9209      	str	r2, [sp, #36]	@ 0x24
 8002926:	f89a 3000 	ldrb.w	r3, [sl]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 809f 	beq.w	8002a6e <_svfiprintf_r+0x1c6>
 8002930:	2300      	movs	r3, #0
 8002932:	f04f 32ff 	mov.w	r2, #4294967295
 8002936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800293a:	f10a 0a01 	add.w	sl, sl, #1
 800293e:	9304      	str	r3, [sp, #16]
 8002940:	9307      	str	r3, [sp, #28]
 8002942:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002946:	931a      	str	r3, [sp, #104]	@ 0x68
 8002948:	4654      	mov	r4, sl
 800294a:	2205      	movs	r2, #5
 800294c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002950:	484e      	ldr	r0, [pc, #312]	@ (8002a8c <_svfiprintf_r+0x1e4>)
 8002952:	f000 fa61 	bl	8002e18 <memchr>
 8002956:	9a04      	ldr	r2, [sp, #16]
 8002958:	b9d8      	cbnz	r0, 8002992 <_svfiprintf_r+0xea>
 800295a:	06d0      	lsls	r0, r2, #27
 800295c:	bf44      	itt	mi
 800295e:	2320      	movmi	r3, #32
 8002960:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002964:	0711      	lsls	r1, r2, #28
 8002966:	bf44      	itt	mi
 8002968:	232b      	movmi	r3, #43	@ 0x2b
 800296a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800296e:	f89a 3000 	ldrb.w	r3, [sl]
 8002972:	2b2a      	cmp	r3, #42	@ 0x2a
 8002974:	d015      	beq.n	80029a2 <_svfiprintf_r+0xfa>
 8002976:	4654      	mov	r4, sl
 8002978:	2000      	movs	r0, #0
 800297a:	f04f 0c0a 	mov.w	ip, #10
 800297e:	9a07      	ldr	r2, [sp, #28]
 8002980:	4621      	mov	r1, r4
 8002982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002986:	3b30      	subs	r3, #48	@ 0x30
 8002988:	2b09      	cmp	r3, #9
 800298a:	d94b      	bls.n	8002a24 <_svfiprintf_r+0x17c>
 800298c:	b1b0      	cbz	r0, 80029bc <_svfiprintf_r+0x114>
 800298e:	9207      	str	r2, [sp, #28]
 8002990:	e014      	b.n	80029bc <_svfiprintf_r+0x114>
 8002992:	eba0 0308 	sub.w	r3, r0, r8
 8002996:	fa09 f303 	lsl.w	r3, r9, r3
 800299a:	4313      	orrs	r3, r2
 800299c:	46a2      	mov	sl, r4
 800299e:	9304      	str	r3, [sp, #16]
 80029a0:	e7d2      	b.n	8002948 <_svfiprintf_r+0xa0>
 80029a2:	9b03      	ldr	r3, [sp, #12]
 80029a4:	1d19      	adds	r1, r3, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	9103      	str	r1, [sp, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bfbb      	ittet	lt
 80029ae:	425b      	neglt	r3, r3
 80029b0:	f042 0202 	orrlt.w	r2, r2, #2
 80029b4:	9307      	strge	r3, [sp, #28]
 80029b6:	9307      	strlt	r3, [sp, #28]
 80029b8:	bfb8      	it	lt
 80029ba:	9204      	strlt	r2, [sp, #16]
 80029bc:	7823      	ldrb	r3, [r4, #0]
 80029be:	2b2e      	cmp	r3, #46	@ 0x2e
 80029c0:	d10a      	bne.n	80029d8 <_svfiprintf_r+0x130>
 80029c2:	7863      	ldrb	r3, [r4, #1]
 80029c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80029c6:	d132      	bne.n	8002a2e <_svfiprintf_r+0x186>
 80029c8:	9b03      	ldr	r3, [sp, #12]
 80029ca:	3402      	adds	r4, #2
 80029cc:	1d1a      	adds	r2, r3, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	9203      	str	r2, [sp, #12]
 80029d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80029d6:	9305      	str	r3, [sp, #20]
 80029d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002a90 <_svfiprintf_r+0x1e8>
 80029dc:	2203      	movs	r2, #3
 80029de:	4650      	mov	r0, sl
 80029e0:	7821      	ldrb	r1, [r4, #0]
 80029e2:	f000 fa19 	bl	8002e18 <memchr>
 80029e6:	b138      	cbz	r0, 80029f8 <_svfiprintf_r+0x150>
 80029e8:	2240      	movs	r2, #64	@ 0x40
 80029ea:	9b04      	ldr	r3, [sp, #16]
 80029ec:	eba0 000a 	sub.w	r0, r0, sl
 80029f0:	4082      	lsls	r2, r0
 80029f2:	4313      	orrs	r3, r2
 80029f4:	3401      	adds	r4, #1
 80029f6:	9304      	str	r3, [sp, #16]
 80029f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029fc:	2206      	movs	r2, #6
 80029fe:	4825      	ldr	r0, [pc, #148]	@ (8002a94 <_svfiprintf_r+0x1ec>)
 8002a00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a04:	f000 fa08 	bl	8002e18 <memchr>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d036      	beq.n	8002a7a <_svfiprintf_r+0x1d2>
 8002a0c:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <_svfiprintf_r+0x1f0>)
 8002a0e:	bb1b      	cbnz	r3, 8002a58 <_svfiprintf_r+0x1b0>
 8002a10:	9b03      	ldr	r3, [sp, #12]
 8002a12:	3307      	adds	r3, #7
 8002a14:	f023 0307 	bic.w	r3, r3, #7
 8002a18:	3308      	adds	r3, #8
 8002a1a:	9303      	str	r3, [sp, #12]
 8002a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a1e:	4433      	add	r3, r6
 8002a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a22:	e76a      	b.n	80028fa <_svfiprintf_r+0x52>
 8002a24:	460c      	mov	r4, r1
 8002a26:	2001      	movs	r0, #1
 8002a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a2c:	e7a8      	b.n	8002980 <_svfiprintf_r+0xd8>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f04f 0c0a 	mov.w	ip, #10
 8002a34:	4619      	mov	r1, r3
 8002a36:	3401      	adds	r4, #1
 8002a38:	9305      	str	r3, [sp, #20]
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a40:	3a30      	subs	r2, #48	@ 0x30
 8002a42:	2a09      	cmp	r2, #9
 8002a44:	d903      	bls.n	8002a4e <_svfiprintf_r+0x1a6>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0c6      	beq.n	80029d8 <_svfiprintf_r+0x130>
 8002a4a:	9105      	str	r1, [sp, #20]
 8002a4c:	e7c4      	b.n	80029d8 <_svfiprintf_r+0x130>
 8002a4e:	4604      	mov	r4, r0
 8002a50:	2301      	movs	r3, #1
 8002a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a56:	e7f0      	b.n	8002a3a <_svfiprintf_r+0x192>
 8002a58:	ab03      	add	r3, sp, #12
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	462a      	mov	r2, r5
 8002a5e:	4638      	mov	r0, r7
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <_svfiprintf_r+0x1f4>)
 8002a62:	a904      	add	r1, sp, #16
 8002a64:	f3af 8000 	nop.w
 8002a68:	1c42      	adds	r2, r0, #1
 8002a6a:	4606      	mov	r6, r0
 8002a6c:	d1d6      	bne.n	8002a1c <_svfiprintf_r+0x174>
 8002a6e:	89ab      	ldrh	r3, [r5, #12]
 8002a70:	065b      	lsls	r3, r3, #25
 8002a72:	f53f af2d 	bmi.w	80028d0 <_svfiprintf_r+0x28>
 8002a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a78:	e72c      	b.n	80028d4 <_svfiprintf_r+0x2c>
 8002a7a:	ab03      	add	r3, sp, #12
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	462a      	mov	r2, r5
 8002a80:	4638      	mov	r0, r7
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <_svfiprintf_r+0x1f4>)
 8002a84:	a904      	add	r1, sp, #16
 8002a86:	f000 f87d 	bl	8002b84 <_printf_i>
 8002a8a:	e7ed      	b.n	8002a68 <_svfiprintf_r+0x1c0>
 8002a8c:	08002f56 	.word	0x08002f56
 8002a90:	08002f5c 	.word	0x08002f5c
 8002a94:	08002f60 	.word	0x08002f60
 8002a98:	00000000 	.word	0x00000000
 8002a9c:	080027f1 	.word	0x080027f1

08002aa0 <_printf_common>:
 8002aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa4:	4616      	mov	r6, r2
 8002aa6:	4698      	mov	r8, r3
 8002aa8:	688a      	ldr	r2, [r1, #8]
 8002aaa:	690b      	ldr	r3, [r1, #16]
 8002aac:	4607      	mov	r7, r0
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	bfb8      	it	lt
 8002ab2:	4613      	movlt	r3, r2
 8002ab4:	6033      	str	r3, [r6, #0]
 8002ab6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002aba:	460c      	mov	r4, r1
 8002abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ac0:	b10a      	cbz	r2, 8002ac6 <_printf_common+0x26>
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	6033      	str	r3, [r6, #0]
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	0699      	lsls	r1, r3, #26
 8002aca:	bf42      	ittt	mi
 8002acc:	6833      	ldrmi	r3, [r6, #0]
 8002ace:	3302      	addmi	r3, #2
 8002ad0:	6033      	strmi	r3, [r6, #0]
 8002ad2:	6825      	ldr	r5, [r4, #0]
 8002ad4:	f015 0506 	ands.w	r5, r5, #6
 8002ad8:	d106      	bne.n	8002ae8 <_printf_common+0x48>
 8002ada:	f104 0a19 	add.w	sl, r4, #25
 8002ade:	68e3      	ldr	r3, [r4, #12]
 8002ae0:	6832      	ldr	r2, [r6, #0]
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	42ab      	cmp	r3, r5
 8002ae6:	dc2b      	bgt.n	8002b40 <_printf_common+0xa0>
 8002ae8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	3b00      	subs	r3, #0
 8002af0:	bf18      	it	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	0692      	lsls	r2, r2, #26
 8002af6:	d430      	bmi.n	8002b5a <_printf_common+0xba>
 8002af8:	4641      	mov	r1, r8
 8002afa:	4638      	mov	r0, r7
 8002afc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b00:	47c8      	blx	r9
 8002b02:	3001      	adds	r0, #1
 8002b04:	d023      	beq.n	8002b4e <_printf_common+0xae>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	6922      	ldr	r2, [r4, #16]
 8002b0a:	f003 0306 	and.w	r3, r3, #6
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf14      	ite	ne
 8002b12:	2500      	movne	r5, #0
 8002b14:	6833      	ldreq	r3, [r6, #0]
 8002b16:	f04f 0600 	mov.w	r6, #0
 8002b1a:	bf08      	it	eq
 8002b1c:	68e5      	ldreq	r5, [r4, #12]
 8002b1e:	f104 041a 	add.w	r4, r4, #26
 8002b22:	bf08      	it	eq
 8002b24:	1aed      	subeq	r5, r5, r3
 8002b26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002b2a:	bf08      	it	eq
 8002b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b30:	4293      	cmp	r3, r2
 8002b32:	bfc4      	itt	gt
 8002b34:	1a9b      	subgt	r3, r3, r2
 8002b36:	18ed      	addgt	r5, r5, r3
 8002b38:	42b5      	cmp	r5, r6
 8002b3a:	d11a      	bne.n	8002b72 <_printf_common+0xd2>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e008      	b.n	8002b52 <_printf_common+0xb2>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4652      	mov	r2, sl
 8002b44:	4641      	mov	r1, r8
 8002b46:	4638      	mov	r0, r7
 8002b48:	47c8      	blx	r9
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d103      	bne.n	8002b56 <_printf_common+0xb6>
 8002b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b56:	3501      	adds	r5, #1
 8002b58:	e7c1      	b.n	8002ade <_printf_common+0x3e>
 8002b5a:	2030      	movs	r0, #48	@ 0x30
 8002b5c:	18e1      	adds	r1, r4, r3
 8002b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b68:	4422      	add	r2, r4
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b70:	e7c2      	b.n	8002af8 <_printf_common+0x58>
 8002b72:	2301      	movs	r3, #1
 8002b74:	4622      	mov	r2, r4
 8002b76:	4641      	mov	r1, r8
 8002b78:	4638      	mov	r0, r7
 8002b7a:	47c8      	blx	r9
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	d0e6      	beq.n	8002b4e <_printf_common+0xae>
 8002b80:	3601      	adds	r6, #1
 8002b82:	e7d9      	b.n	8002b38 <_printf_common+0x98>

08002b84 <_printf_i>:
 8002b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b88:	7e0f      	ldrb	r7, [r1, #24]
 8002b8a:	4691      	mov	r9, r2
 8002b8c:	2f78      	cmp	r7, #120	@ 0x78
 8002b8e:	4680      	mov	r8, r0
 8002b90:	460c      	mov	r4, r1
 8002b92:	469a      	mov	sl, r3
 8002b94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b9a:	d807      	bhi.n	8002bac <_printf_i+0x28>
 8002b9c:	2f62      	cmp	r7, #98	@ 0x62
 8002b9e:	d80a      	bhi.n	8002bb6 <_printf_i+0x32>
 8002ba0:	2f00      	cmp	r7, #0
 8002ba2:	f000 80d3 	beq.w	8002d4c <_printf_i+0x1c8>
 8002ba6:	2f58      	cmp	r7, #88	@ 0x58
 8002ba8:	f000 80ba 	beq.w	8002d20 <_printf_i+0x19c>
 8002bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002bb4:	e03a      	b.n	8002c2c <_printf_i+0xa8>
 8002bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bba:	2b15      	cmp	r3, #21
 8002bbc:	d8f6      	bhi.n	8002bac <_printf_i+0x28>
 8002bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8002bc4 <_printf_i+0x40>)
 8002bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bc4:	08002c1d 	.word	0x08002c1d
 8002bc8:	08002c31 	.word	0x08002c31
 8002bcc:	08002bad 	.word	0x08002bad
 8002bd0:	08002bad 	.word	0x08002bad
 8002bd4:	08002bad 	.word	0x08002bad
 8002bd8:	08002bad 	.word	0x08002bad
 8002bdc:	08002c31 	.word	0x08002c31
 8002be0:	08002bad 	.word	0x08002bad
 8002be4:	08002bad 	.word	0x08002bad
 8002be8:	08002bad 	.word	0x08002bad
 8002bec:	08002bad 	.word	0x08002bad
 8002bf0:	08002d33 	.word	0x08002d33
 8002bf4:	08002c5b 	.word	0x08002c5b
 8002bf8:	08002ced 	.word	0x08002ced
 8002bfc:	08002bad 	.word	0x08002bad
 8002c00:	08002bad 	.word	0x08002bad
 8002c04:	08002d55 	.word	0x08002d55
 8002c08:	08002bad 	.word	0x08002bad
 8002c0c:	08002c5b 	.word	0x08002c5b
 8002c10:	08002bad 	.word	0x08002bad
 8002c14:	08002bad 	.word	0x08002bad
 8002c18:	08002cf5 	.word	0x08002cf5
 8002c1c:	6833      	ldr	r3, [r6, #0]
 8002c1e:	1d1a      	adds	r2, r3, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6032      	str	r2, [r6, #0]
 8002c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e09e      	b.n	8002d6e <_printf_i+0x1ea>
 8002c30:	6833      	ldr	r3, [r6, #0]
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	1d19      	adds	r1, r3, #4
 8002c36:	6031      	str	r1, [r6, #0]
 8002c38:	0606      	lsls	r6, r0, #24
 8002c3a:	d501      	bpl.n	8002c40 <_printf_i+0xbc>
 8002c3c:	681d      	ldr	r5, [r3, #0]
 8002c3e:	e003      	b.n	8002c48 <_printf_i+0xc4>
 8002c40:	0645      	lsls	r5, r0, #25
 8002c42:	d5fb      	bpl.n	8002c3c <_printf_i+0xb8>
 8002c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	da03      	bge.n	8002c54 <_printf_i+0xd0>
 8002c4c:	232d      	movs	r3, #45	@ 0x2d
 8002c4e:	426d      	negs	r5, r5
 8002c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c54:	230a      	movs	r3, #10
 8002c56:	4859      	ldr	r0, [pc, #356]	@ (8002dbc <_printf_i+0x238>)
 8002c58:	e011      	b.n	8002c7e <_printf_i+0xfa>
 8002c5a:	6821      	ldr	r1, [r4, #0]
 8002c5c:	6833      	ldr	r3, [r6, #0]
 8002c5e:	0608      	lsls	r0, r1, #24
 8002c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c64:	d402      	bmi.n	8002c6c <_printf_i+0xe8>
 8002c66:	0649      	lsls	r1, r1, #25
 8002c68:	bf48      	it	mi
 8002c6a:	b2ad      	uxthmi	r5, r5
 8002c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c6e:	6033      	str	r3, [r6, #0]
 8002c70:	bf14      	ite	ne
 8002c72:	230a      	movne	r3, #10
 8002c74:	2308      	moveq	r3, #8
 8002c76:	4851      	ldr	r0, [pc, #324]	@ (8002dbc <_printf_i+0x238>)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c7e:	6866      	ldr	r6, [r4, #4]
 8002c80:	2e00      	cmp	r6, #0
 8002c82:	bfa8      	it	ge
 8002c84:	6821      	ldrge	r1, [r4, #0]
 8002c86:	60a6      	str	r6, [r4, #8]
 8002c88:	bfa4      	itt	ge
 8002c8a:	f021 0104 	bicge.w	r1, r1, #4
 8002c8e:	6021      	strge	r1, [r4, #0]
 8002c90:	b90d      	cbnz	r5, 8002c96 <_printf_i+0x112>
 8002c92:	2e00      	cmp	r6, #0
 8002c94:	d04b      	beq.n	8002d2e <_printf_i+0x1aa>
 8002c96:	4616      	mov	r6, r2
 8002c98:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c9c:	fb03 5711 	mls	r7, r3, r1, r5
 8002ca0:	5dc7      	ldrb	r7, [r0, r7]
 8002ca2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ca6:	462f      	mov	r7, r5
 8002ca8:	42bb      	cmp	r3, r7
 8002caa:	460d      	mov	r5, r1
 8002cac:	d9f4      	bls.n	8002c98 <_printf_i+0x114>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d10b      	bne.n	8002cca <_printf_i+0x146>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	07df      	lsls	r7, r3, #31
 8002cb6:	d508      	bpl.n	8002cca <_printf_i+0x146>
 8002cb8:	6923      	ldr	r3, [r4, #16]
 8002cba:	6861      	ldr	r1, [r4, #4]
 8002cbc:	4299      	cmp	r1, r3
 8002cbe:	bfde      	ittt	le
 8002cc0:	2330      	movle	r3, #48	@ 0x30
 8002cc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002cca:	1b92      	subs	r2, r2, r6
 8002ccc:	6122      	str	r2, [r4, #16]
 8002cce:	464b      	mov	r3, r9
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	4640      	mov	r0, r8
 8002cd4:	f8cd a000 	str.w	sl, [sp]
 8002cd8:	aa03      	add	r2, sp, #12
 8002cda:	f7ff fee1 	bl	8002aa0 <_printf_common>
 8002cde:	3001      	adds	r0, #1
 8002ce0:	d14a      	bne.n	8002d78 <_printf_i+0x1f4>
 8002ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce6:	b004      	add	sp, #16
 8002ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	f043 0320 	orr.w	r3, r3, #32
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	2778      	movs	r7, #120	@ 0x78
 8002cf6:	4832      	ldr	r0, [pc, #200]	@ (8002dc0 <_printf_i+0x23c>)
 8002cf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	6831      	ldr	r1, [r6, #0]
 8002d00:	061f      	lsls	r7, r3, #24
 8002d02:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d06:	d402      	bmi.n	8002d0e <_printf_i+0x18a>
 8002d08:	065f      	lsls	r7, r3, #25
 8002d0a:	bf48      	it	mi
 8002d0c:	b2ad      	uxthmi	r5, r5
 8002d0e:	6031      	str	r1, [r6, #0]
 8002d10:	07d9      	lsls	r1, r3, #31
 8002d12:	bf44      	itt	mi
 8002d14:	f043 0320 	orrmi.w	r3, r3, #32
 8002d18:	6023      	strmi	r3, [r4, #0]
 8002d1a:	b11d      	cbz	r5, 8002d24 <_printf_i+0x1a0>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	e7ab      	b.n	8002c78 <_printf_i+0xf4>
 8002d20:	4826      	ldr	r0, [pc, #152]	@ (8002dbc <_printf_i+0x238>)
 8002d22:	e7e9      	b.n	8002cf8 <_printf_i+0x174>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	f023 0320 	bic.w	r3, r3, #32
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	e7f6      	b.n	8002d1c <_printf_i+0x198>
 8002d2e:	4616      	mov	r6, r2
 8002d30:	e7bd      	b.n	8002cae <_printf_i+0x12a>
 8002d32:	6833      	ldr	r3, [r6, #0]
 8002d34:	6825      	ldr	r5, [r4, #0]
 8002d36:	1d18      	adds	r0, r3, #4
 8002d38:	6961      	ldr	r1, [r4, #20]
 8002d3a:	6030      	str	r0, [r6, #0]
 8002d3c:	062e      	lsls	r6, r5, #24
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	d501      	bpl.n	8002d46 <_printf_i+0x1c2>
 8002d42:	6019      	str	r1, [r3, #0]
 8002d44:	e002      	b.n	8002d4c <_printf_i+0x1c8>
 8002d46:	0668      	lsls	r0, r5, #25
 8002d48:	d5fb      	bpl.n	8002d42 <_printf_i+0x1be>
 8002d4a:	8019      	strh	r1, [r3, #0]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	4616      	mov	r6, r2
 8002d50:	6123      	str	r3, [r4, #16]
 8002d52:	e7bc      	b.n	8002cce <_printf_i+0x14a>
 8002d54:	6833      	ldr	r3, [r6, #0]
 8002d56:	2100      	movs	r1, #0
 8002d58:	1d1a      	adds	r2, r3, #4
 8002d5a:	6032      	str	r2, [r6, #0]
 8002d5c:	681e      	ldr	r6, [r3, #0]
 8002d5e:	6862      	ldr	r2, [r4, #4]
 8002d60:	4630      	mov	r0, r6
 8002d62:	f000 f859 	bl	8002e18 <memchr>
 8002d66:	b108      	cbz	r0, 8002d6c <_printf_i+0x1e8>
 8002d68:	1b80      	subs	r0, r0, r6
 8002d6a:	6060      	str	r0, [r4, #4]
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	6123      	str	r3, [r4, #16]
 8002d70:	2300      	movs	r3, #0
 8002d72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d76:	e7aa      	b.n	8002cce <_printf_i+0x14a>
 8002d78:	4632      	mov	r2, r6
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	4640      	mov	r0, r8
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	47d0      	blx	sl
 8002d82:	3001      	adds	r0, #1
 8002d84:	d0ad      	beq.n	8002ce2 <_printf_i+0x15e>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	079b      	lsls	r3, r3, #30
 8002d8a:	d413      	bmi.n	8002db4 <_printf_i+0x230>
 8002d8c:	68e0      	ldr	r0, [r4, #12]
 8002d8e:	9b03      	ldr	r3, [sp, #12]
 8002d90:	4298      	cmp	r0, r3
 8002d92:	bfb8      	it	lt
 8002d94:	4618      	movlt	r0, r3
 8002d96:	e7a6      	b.n	8002ce6 <_printf_i+0x162>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4632      	mov	r2, r6
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	4640      	mov	r0, r8
 8002da0:	47d0      	blx	sl
 8002da2:	3001      	adds	r0, #1
 8002da4:	d09d      	beq.n	8002ce2 <_printf_i+0x15e>
 8002da6:	3501      	adds	r5, #1
 8002da8:	68e3      	ldr	r3, [r4, #12]
 8002daa:	9903      	ldr	r1, [sp, #12]
 8002dac:	1a5b      	subs	r3, r3, r1
 8002dae:	42ab      	cmp	r3, r5
 8002db0:	dcf2      	bgt.n	8002d98 <_printf_i+0x214>
 8002db2:	e7eb      	b.n	8002d8c <_printf_i+0x208>
 8002db4:	2500      	movs	r5, #0
 8002db6:	f104 0619 	add.w	r6, r4, #25
 8002dba:	e7f5      	b.n	8002da8 <_printf_i+0x224>
 8002dbc:	08002f67 	.word	0x08002f67
 8002dc0:	08002f78 	.word	0x08002f78

08002dc4 <memmove>:
 8002dc4:	4288      	cmp	r0, r1
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	eb01 0402 	add.w	r4, r1, r2
 8002dcc:	d902      	bls.n	8002dd4 <memmove+0x10>
 8002dce:	4284      	cmp	r4, r0
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	d807      	bhi.n	8002de4 <memmove+0x20>
 8002dd4:	1e43      	subs	r3, r0, #1
 8002dd6:	42a1      	cmp	r1, r4
 8002dd8:	d008      	beq.n	8002dec <memmove+0x28>
 8002dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002de2:	e7f8      	b.n	8002dd6 <memmove+0x12>
 8002de4:	4601      	mov	r1, r0
 8002de6:	4402      	add	r2, r0
 8002de8:	428a      	cmp	r2, r1
 8002dea:	d100      	bne.n	8002dee <memmove+0x2a>
 8002dec:	bd10      	pop	{r4, pc}
 8002dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002df6:	e7f7      	b.n	8002de8 <memmove+0x24>

08002df8 <_sbrk_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	4d05      	ldr	r5, [pc, #20]	@ (8002e14 <_sbrk_r+0x1c>)
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	602b      	str	r3, [r5, #0]
 8002e04:	f7fd fc4a 	bl	800069c <_sbrk>
 8002e08:	1c43      	adds	r3, r0, #1
 8002e0a:	d102      	bne.n	8002e12 <_sbrk_r+0x1a>
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	b103      	cbz	r3, 8002e12 <_sbrk_r+0x1a>
 8002e10:	6023      	str	r3, [r4, #0]
 8002e12:	bd38      	pop	{r3, r4, r5, pc}
 8002e14:	20000258 	.word	0x20000258

08002e18 <memchr>:
 8002e18:	4603      	mov	r3, r0
 8002e1a:	b510      	push	{r4, lr}
 8002e1c:	b2c9      	uxtb	r1, r1
 8002e1e:	4402      	add	r2, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	d101      	bne.n	8002e2a <memchr+0x12>
 8002e26:	2000      	movs	r0, #0
 8002e28:	e003      	b.n	8002e32 <memchr+0x1a>
 8002e2a:	7804      	ldrb	r4, [r0, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	428c      	cmp	r4, r1
 8002e30:	d1f6      	bne.n	8002e20 <memchr+0x8>
 8002e32:	bd10      	pop	{r4, pc}

08002e34 <memcpy>:
 8002e34:	440a      	add	r2, r1
 8002e36:	4291      	cmp	r1, r2
 8002e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e3c:	d100      	bne.n	8002e40 <memcpy+0xc>
 8002e3e:	4770      	bx	lr
 8002e40:	b510      	push	{r4, lr}
 8002e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e46:	4291      	cmp	r1, r2
 8002e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e4c:	d1f9      	bne.n	8002e42 <memcpy+0xe>
 8002e4e:	bd10      	pop	{r4, pc}

08002e50 <_realloc_r>:
 8002e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e54:	4680      	mov	r8, r0
 8002e56:	4615      	mov	r5, r2
 8002e58:	460c      	mov	r4, r1
 8002e5a:	b921      	cbnz	r1, 8002e66 <_realloc_r+0x16>
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e62:	f7ff bc39 	b.w	80026d8 <_malloc_r>
 8002e66:	b92a      	cbnz	r2, 8002e74 <_realloc_r+0x24>
 8002e68:	f7ff fbcc 	bl	8002604 <_free_r>
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	4620      	mov	r0, r4
 8002e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e74:	f000 f81a 	bl	8002eac <_malloc_usable_size_r>
 8002e78:	4285      	cmp	r5, r0
 8002e7a:	4606      	mov	r6, r0
 8002e7c:	d802      	bhi.n	8002e84 <_realloc_r+0x34>
 8002e7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002e82:	d8f4      	bhi.n	8002e6e <_realloc_r+0x1e>
 8002e84:	4629      	mov	r1, r5
 8002e86:	4640      	mov	r0, r8
 8002e88:	f7ff fc26 	bl	80026d8 <_malloc_r>
 8002e8c:	4607      	mov	r7, r0
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d0ec      	beq.n	8002e6c <_realloc_r+0x1c>
 8002e92:	42b5      	cmp	r5, r6
 8002e94:	462a      	mov	r2, r5
 8002e96:	4621      	mov	r1, r4
 8002e98:	bf28      	it	cs
 8002e9a:	4632      	movcs	r2, r6
 8002e9c:	f7ff ffca 	bl	8002e34 <memcpy>
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4640      	mov	r0, r8
 8002ea4:	f7ff fbae 	bl	8002604 <_free_r>
 8002ea8:	463c      	mov	r4, r7
 8002eaa:	e7e0      	b.n	8002e6e <_realloc_r+0x1e>

08002eac <_malloc_usable_size_r>:
 8002eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb0:	1f18      	subs	r0, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bfbc      	itt	lt
 8002eb6:	580b      	ldrlt	r3, [r1, r0]
 8002eb8:	18c0      	addlt	r0, r0, r3
 8002eba:	4770      	bx	lr

08002ebc <_init>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr

08002ec8 <_fini>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr
